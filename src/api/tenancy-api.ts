/* tslint:disable */
/* eslint-disable */
/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineResponse20057 } from '../models';
// @ts-ignore
import { InlineResponse20058 } from '../models';
// @ts-ignore
import { Tenant } from '../models';
// @ts-ignore
import { TenantGroup } from '../models';
// @ts-ignore
import { WritableTenant } from '../models';
// @ts-ignore
import { WritableTenantGroup } from '../models';
/**
 * TenancyApi - axios parameter creator
 * @export
 */
export const TenancyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantGroupsBulkDelete: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenancy/tenant-groups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WritableTenantGroup} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantGroupsBulkPartialUpdate: async (data: WritableTenantGroup, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('tenancyTenantGroupsBulkPartialUpdate', 'data', data)
            const localVarPath = `/tenancy/tenant-groups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WritableTenantGroup} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantGroupsBulkUpdate: async (data: WritableTenantGroup, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('tenancyTenantGroupsBulkUpdate', 'data', data)
            const localVarPath = `/tenancy/tenant-groups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WritableTenantGroup} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantGroupsCreate: async (data: WritableTenantGroup, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('tenancyTenantGroupsCreate', 'data', data)
            const localVarPath = `/tenancy/tenant-groups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantGroupsDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tenancyTenantGroupsDelete', 'id', id)
            const localVarPath = `/tenancy/tenant-groups/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [slug] 
         * @param {string} [description] 
         * @param {string} [q] 
         * @param {string} [parentId] 
         * @param {string} [parent] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {string} [slugN] 
         * @param {string} [slugIc] 
         * @param {string} [slugNic] 
         * @param {string} [slugIew] 
         * @param {string} [slugNiew] 
         * @param {string} [slugIsw] 
         * @param {string} [slugNisw] 
         * @param {string} [slugIe] 
         * @param {string} [slugNie] 
         * @param {string} [descriptionN] 
         * @param {string} [descriptionIc] 
         * @param {string} [descriptionNic] 
         * @param {string} [descriptionIew] 
         * @param {string} [descriptionNiew] 
         * @param {string} [descriptionIsw] 
         * @param {string} [descriptionNisw] 
         * @param {string} [descriptionIe] 
         * @param {string} [descriptionNie] 
         * @param {string} [parentIdN] 
         * @param {string} [parentN] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantGroupsList: async (id?: string, name?: string, slug?: string, description?: string, q?: string, parentId?: string, parent?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, slugN?: string, slugIc?: string, slugNic?: string, slugIew?: string, slugNiew?: string, slugIsw?: string, slugNisw?: string, slugIe?: string, slugNie?: string, descriptionN?: string, descriptionIc?: string, descriptionNic?: string, descriptionIew?: string, descriptionNiew?: string, descriptionIsw?: string, descriptionNisw?: string, descriptionIe?: string, descriptionNie?: string, parentIdN?: string, parentN?: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenancy/tenant-groups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (slug !== undefined) {
                localVarQueryParameter['slug'] = slug;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['parent_id'] = parentId;
            }

            if (parent !== undefined) {
                localVarQueryParameter['parent'] = parent;
            }

            if (idN !== undefined) {
                localVarQueryParameter['id__n'] = idN;
            }

            if (idLte !== undefined) {
                localVarQueryParameter['id__lte'] = idLte;
            }

            if (idLt !== undefined) {
                localVarQueryParameter['id__lt'] = idLt;
            }

            if (idGte !== undefined) {
                localVarQueryParameter['id__gte'] = idGte;
            }

            if (idGt !== undefined) {
                localVarQueryParameter['id__gt'] = idGt;
            }

            if (nameN !== undefined) {
                localVarQueryParameter['name__n'] = nameN;
            }

            if (nameIc !== undefined) {
                localVarQueryParameter['name__ic'] = nameIc;
            }

            if (nameNic !== undefined) {
                localVarQueryParameter['name__nic'] = nameNic;
            }

            if (nameIew !== undefined) {
                localVarQueryParameter['name__iew'] = nameIew;
            }

            if (nameNiew !== undefined) {
                localVarQueryParameter['name__niew'] = nameNiew;
            }

            if (nameIsw !== undefined) {
                localVarQueryParameter['name__isw'] = nameIsw;
            }

            if (nameNisw !== undefined) {
                localVarQueryParameter['name__nisw'] = nameNisw;
            }

            if (nameIe !== undefined) {
                localVarQueryParameter['name__ie'] = nameIe;
            }

            if (nameNie !== undefined) {
                localVarQueryParameter['name__nie'] = nameNie;
            }

            if (slugN !== undefined) {
                localVarQueryParameter['slug__n'] = slugN;
            }

            if (slugIc !== undefined) {
                localVarQueryParameter['slug__ic'] = slugIc;
            }

            if (slugNic !== undefined) {
                localVarQueryParameter['slug__nic'] = slugNic;
            }

            if (slugIew !== undefined) {
                localVarQueryParameter['slug__iew'] = slugIew;
            }

            if (slugNiew !== undefined) {
                localVarQueryParameter['slug__niew'] = slugNiew;
            }

            if (slugIsw !== undefined) {
                localVarQueryParameter['slug__isw'] = slugIsw;
            }

            if (slugNisw !== undefined) {
                localVarQueryParameter['slug__nisw'] = slugNisw;
            }

            if (slugIe !== undefined) {
                localVarQueryParameter['slug__ie'] = slugIe;
            }

            if (slugNie !== undefined) {
                localVarQueryParameter['slug__nie'] = slugNie;
            }

            if (descriptionN !== undefined) {
                localVarQueryParameter['description__n'] = descriptionN;
            }

            if (descriptionIc !== undefined) {
                localVarQueryParameter['description__ic'] = descriptionIc;
            }

            if (descriptionNic !== undefined) {
                localVarQueryParameter['description__nic'] = descriptionNic;
            }

            if (descriptionIew !== undefined) {
                localVarQueryParameter['description__iew'] = descriptionIew;
            }

            if (descriptionNiew !== undefined) {
                localVarQueryParameter['description__niew'] = descriptionNiew;
            }

            if (descriptionIsw !== undefined) {
                localVarQueryParameter['description__isw'] = descriptionIsw;
            }

            if (descriptionNisw !== undefined) {
                localVarQueryParameter['description__nisw'] = descriptionNisw;
            }

            if (descriptionIe !== undefined) {
                localVarQueryParameter['description__ie'] = descriptionIe;
            }

            if (descriptionNie !== undefined) {
                localVarQueryParameter['description__nie'] = descriptionNie;
            }

            if (parentIdN !== undefined) {
                localVarQueryParameter['parent_id__n'] = parentIdN;
            }

            if (parentN !== undefined) {
                localVarQueryParameter['parent__n'] = parentN;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant group.
         * @param {WritableTenantGroup} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantGroupsPartialUpdate: async (id: number, data: WritableTenantGroup, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tenancyTenantGroupsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('tenancyTenantGroupsPartialUpdate', 'data', data)
            const localVarPath = `/tenancy/tenant-groups/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantGroupsRead: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tenancyTenantGroupsRead', 'id', id)
            const localVarPath = `/tenancy/tenant-groups/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant group.
         * @param {WritableTenantGroup} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantGroupsUpdate: async (id: number, data: WritableTenantGroup, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tenancyTenantGroupsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('tenancyTenantGroupsUpdate', 'data', data)
            const localVarPath = `/tenancy/tenant-groups/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantsBulkDelete: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenancy/tenants/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WritableTenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantsBulkPartialUpdate: async (data: WritableTenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('tenancyTenantsBulkPartialUpdate', 'data', data)
            const localVarPath = `/tenancy/tenants/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WritableTenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantsBulkUpdate: async (data: WritableTenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('tenancyTenantsBulkUpdate', 'data', data)
            const localVarPath = `/tenancy/tenants/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WritableTenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantsCreate: async (data: WritableTenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('tenancyTenantsCreate', 'data', data)
            const localVarPath = `/tenancy/tenants/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantsDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tenancyTenantsDelete', 'id', id)
            const localVarPath = `/tenancy/tenants/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [slug] 
         * @param {string} [created] 
         * @param {string} [createdGte] 
         * @param {string} [createdLte] 
         * @param {string} [lastUpdated] 
         * @param {string} [lastUpdatedGte] 
         * @param {string} [lastUpdatedLte] 
         * @param {string} [q] 
         * @param {string} [groupId] 
         * @param {string} [group] 
         * @param {string} [tag] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {string} [slugN] 
         * @param {string} [slugIc] 
         * @param {string} [slugNic] 
         * @param {string} [slugIew] 
         * @param {string} [slugNiew] 
         * @param {string} [slugIsw] 
         * @param {string} [slugNisw] 
         * @param {string} [slugIe] 
         * @param {string} [slugNie] 
         * @param {string} [groupIdN] 
         * @param {string} [groupN] 
         * @param {string} [tagN] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantsList: async (id?: string, name?: string, slug?: string, created?: string, createdGte?: string, createdLte?: string, lastUpdated?: string, lastUpdatedGte?: string, lastUpdatedLte?: string, q?: string, groupId?: string, group?: string, tag?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, slugN?: string, slugIc?: string, slugNic?: string, slugIew?: string, slugNiew?: string, slugIsw?: string, slugNisw?: string, slugIe?: string, slugNie?: string, groupIdN?: string, groupN?: string, tagN?: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenancy/tenants/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (slug !== undefined) {
                localVarQueryParameter['slug'] = slug;
            }

            if (created !== undefined) {
                localVarQueryParameter['created'] = created;
            }

            if (createdGte !== undefined) {
                localVarQueryParameter['created__gte'] = createdGte;
            }

            if (createdLte !== undefined) {
                localVarQueryParameter['created__lte'] = createdLte;
            }

            if (lastUpdated !== undefined) {
                localVarQueryParameter['last_updated'] = lastUpdated;
            }

            if (lastUpdatedGte !== undefined) {
                localVarQueryParameter['last_updated__gte'] = lastUpdatedGte;
            }

            if (lastUpdatedLte !== undefined) {
                localVarQueryParameter['last_updated__lte'] = lastUpdatedLte;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (group !== undefined) {
                localVarQueryParameter['group'] = group;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (idN !== undefined) {
                localVarQueryParameter['id__n'] = idN;
            }

            if (idLte !== undefined) {
                localVarQueryParameter['id__lte'] = idLte;
            }

            if (idLt !== undefined) {
                localVarQueryParameter['id__lt'] = idLt;
            }

            if (idGte !== undefined) {
                localVarQueryParameter['id__gte'] = idGte;
            }

            if (idGt !== undefined) {
                localVarQueryParameter['id__gt'] = idGt;
            }

            if (nameN !== undefined) {
                localVarQueryParameter['name__n'] = nameN;
            }

            if (nameIc !== undefined) {
                localVarQueryParameter['name__ic'] = nameIc;
            }

            if (nameNic !== undefined) {
                localVarQueryParameter['name__nic'] = nameNic;
            }

            if (nameIew !== undefined) {
                localVarQueryParameter['name__iew'] = nameIew;
            }

            if (nameNiew !== undefined) {
                localVarQueryParameter['name__niew'] = nameNiew;
            }

            if (nameIsw !== undefined) {
                localVarQueryParameter['name__isw'] = nameIsw;
            }

            if (nameNisw !== undefined) {
                localVarQueryParameter['name__nisw'] = nameNisw;
            }

            if (nameIe !== undefined) {
                localVarQueryParameter['name__ie'] = nameIe;
            }

            if (nameNie !== undefined) {
                localVarQueryParameter['name__nie'] = nameNie;
            }

            if (slugN !== undefined) {
                localVarQueryParameter['slug__n'] = slugN;
            }

            if (slugIc !== undefined) {
                localVarQueryParameter['slug__ic'] = slugIc;
            }

            if (slugNic !== undefined) {
                localVarQueryParameter['slug__nic'] = slugNic;
            }

            if (slugIew !== undefined) {
                localVarQueryParameter['slug__iew'] = slugIew;
            }

            if (slugNiew !== undefined) {
                localVarQueryParameter['slug__niew'] = slugNiew;
            }

            if (slugIsw !== undefined) {
                localVarQueryParameter['slug__isw'] = slugIsw;
            }

            if (slugNisw !== undefined) {
                localVarQueryParameter['slug__nisw'] = slugNisw;
            }

            if (slugIe !== undefined) {
                localVarQueryParameter['slug__ie'] = slugIe;
            }

            if (slugNie !== undefined) {
                localVarQueryParameter['slug__nie'] = slugNie;
            }

            if (groupIdN !== undefined) {
                localVarQueryParameter['group_id__n'] = groupIdN;
            }

            if (groupN !== undefined) {
                localVarQueryParameter['group__n'] = groupN;
            }

            if (tagN !== undefined) {
                localVarQueryParameter['tag__n'] = tagN;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant.
         * @param {WritableTenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantsPartialUpdate: async (id: number, data: WritableTenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tenancyTenantsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('tenancyTenantsPartialUpdate', 'data', data)
            const localVarPath = `/tenancy/tenants/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantsRead: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tenancyTenantsRead', 'id', id)
            const localVarPath = `/tenancy/tenants/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant.
         * @param {WritableTenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantsUpdate: async (id: number, data: WritableTenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tenancyTenantsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('tenancyTenantsUpdate', 'data', data)
            const localVarPath = `/tenancy/tenants/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenancyApi - functional programming interface
 * @export
 */
export const TenancyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TenancyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenancyTenantGroupsBulkDelete(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenancyTenantGroupsBulkDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WritableTenantGroup} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenancyTenantGroupsBulkPartialUpdate(data: WritableTenantGroup, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenancyTenantGroupsBulkPartialUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WritableTenantGroup} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenancyTenantGroupsBulkUpdate(data: WritableTenantGroup, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenancyTenantGroupsBulkUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WritableTenantGroup} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenancyTenantGroupsCreate(data: WritableTenantGroup, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenancyTenantGroupsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenancyTenantGroupsDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenancyTenantGroupsDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [slug] 
         * @param {string} [description] 
         * @param {string} [q] 
         * @param {string} [parentId] 
         * @param {string} [parent] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {string} [slugN] 
         * @param {string} [slugIc] 
         * @param {string} [slugNic] 
         * @param {string} [slugIew] 
         * @param {string} [slugNiew] 
         * @param {string} [slugIsw] 
         * @param {string} [slugNisw] 
         * @param {string} [slugIe] 
         * @param {string} [slugNie] 
         * @param {string} [descriptionN] 
         * @param {string} [descriptionIc] 
         * @param {string} [descriptionNic] 
         * @param {string} [descriptionIew] 
         * @param {string} [descriptionNiew] 
         * @param {string} [descriptionIsw] 
         * @param {string} [descriptionNisw] 
         * @param {string} [descriptionIe] 
         * @param {string} [descriptionNie] 
         * @param {string} [parentIdN] 
         * @param {string} [parentN] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenancyTenantGroupsList(id?: string, name?: string, slug?: string, description?: string, q?: string, parentId?: string, parent?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, slugN?: string, slugIc?: string, slugNic?: string, slugIew?: string, slugNiew?: string, slugIsw?: string, slugNisw?: string, slugIe?: string, slugNie?: string, descriptionN?: string, descriptionIc?: string, descriptionNic?: string, descriptionIew?: string, descriptionNiew?: string, descriptionIsw?: string, descriptionNisw?: string, descriptionIe?: string, descriptionNie?: string, parentIdN?: string, parentN?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20057>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenancyTenantGroupsList(id, name, slug, description, q, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, parentIdN, parentN, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant group.
         * @param {WritableTenantGroup} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenancyTenantGroupsPartialUpdate(id: number, data: WritableTenantGroup, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenancyTenantGroupsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenancyTenantGroupsRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenancyTenantGroupsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant group.
         * @param {WritableTenantGroup} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenancyTenantGroupsUpdate(id: number, data: WritableTenantGroup, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenancyTenantGroupsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenancyTenantsBulkDelete(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenancyTenantsBulkDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WritableTenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenancyTenantsBulkPartialUpdate(data: WritableTenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenancyTenantsBulkPartialUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WritableTenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenancyTenantsBulkUpdate(data: WritableTenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenancyTenantsBulkUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WritableTenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenancyTenantsCreate(data: WritableTenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenancyTenantsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenancyTenantsDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenancyTenantsDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [slug] 
         * @param {string} [created] 
         * @param {string} [createdGte] 
         * @param {string} [createdLte] 
         * @param {string} [lastUpdated] 
         * @param {string} [lastUpdatedGte] 
         * @param {string} [lastUpdatedLte] 
         * @param {string} [q] 
         * @param {string} [groupId] 
         * @param {string} [group] 
         * @param {string} [tag] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {string} [slugN] 
         * @param {string} [slugIc] 
         * @param {string} [slugNic] 
         * @param {string} [slugIew] 
         * @param {string} [slugNiew] 
         * @param {string} [slugIsw] 
         * @param {string} [slugNisw] 
         * @param {string} [slugIe] 
         * @param {string} [slugNie] 
         * @param {string} [groupIdN] 
         * @param {string} [groupN] 
         * @param {string} [tagN] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenancyTenantsList(id?: string, name?: string, slug?: string, created?: string, createdGte?: string, createdLte?: string, lastUpdated?: string, lastUpdatedGte?: string, lastUpdatedLte?: string, q?: string, groupId?: string, group?: string, tag?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, slugN?: string, slugIc?: string, slugNic?: string, slugIew?: string, slugNiew?: string, slugIsw?: string, slugNisw?: string, slugIe?: string, slugNie?: string, groupIdN?: string, groupN?: string, tagN?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20058>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenancyTenantsList(id, name, slug, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, groupId, group, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, groupIdN, groupN, tagN, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant.
         * @param {WritableTenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenancyTenantsPartialUpdate(id: number, data: WritableTenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenancyTenantsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenancyTenantsRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenancyTenantsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant.
         * @param {WritableTenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenancyTenantsUpdate(id: number, data: WritableTenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenancyTenantsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TenancyApi - factory interface
 * @export
 */
export const TenancyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TenancyApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantGroupsBulkDelete(options?: any): AxiosPromise<void> {
            return localVarFp.tenancyTenantGroupsBulkDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WritableTenantGroup} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantGroupsBulkPartialUpdate(data: WritableTenantGroup, options?: any): AxiosPromise<TenantGroup> {
            return localVarFp.tenancyTenantGroupsBulkPartialUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WritableTenantGroup} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantGroupsBulkUpdate(data: WritableTenantGroup, options?: any): AxiosPromise<TenantGroup> {
            return localVarFp.tenancyTenantGroupsBulkUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WritableTenantGroup} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantGroupsCreate(data: WritableTenantGroup, options?: any): AxiosPromise<TenantGroup> {
            return localVarFp.tenancyTenantGroupsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantGroupsDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.tenancyTenantGroupsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [slug] 
         * @param {string} [description] 
         * @param {string} [q] 
         * @param {string} [parentId] 
         * @param {string} [parent] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {string} [slugN] 
         * @param {string} [slugIc] 
         * @param {string} [slugNic] 
         * @param {string} [slugIew] 
         * @param {string} [slugNiew] 
         * @param {string} [slugIsw] 
         * @param {string} [slugNisw] 
         * @param {string} [slugIe] 
         * @param {string} [slugNie] 
         * @param {string} [descriptionN] 
         * @param {string} [descriptionIc] 
         * @param {string} [descriptionNic] 
         * @param {string} [descriptionIew] 
         * @param {string} [descriptionNiew] 
         * @param {string} [descriptionIsw] 
         * @param {string} [descriptionNisw] 
         * @param {string} [descriptionIe] 
         * @param {string} [descriptionNie] 
         * @param {string} [parentIdN] 
         * @param {string} [parentN] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantGroupsList(id?: string, name?: string, slug?: string, description?: string, q?: string, parentId?: string, parent?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, slugN?: string, slugIc?: string, slugNic?: string, slugIew?: string, slugNiew?: string, slugIsw?: string, slugNisw?: string, slugIe?: string, slugNie?: string, descriptionN?: string, descriptionIc?: string, descriptionNic?: string, descriptionIew?: string, descriptionNiew?: string, descriptionIsw?: string, descriptionNisw?: string, descriptionIe?: string, descriptionNie?: string, parentIdN?: string, parentN?: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse20057> {
            return localVarFp.tenancyTenantGroupsList(id, name, slug, description, q, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, parentIdN, parentN, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant group.
         * @param {WritableTenantGroup} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantGroupsPartialUpdate(id: number, data: WritableTenantGroup, options?: any): AxiosPromise<TenantGroup> {
            return localVarFp.tenancyTenantGroupsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantGroupsRead(id: number, options?: any): AxiosPromise<TenantGroup> {
            return localVarFp.tenancyTenantGroupsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant group.
         * @param {WritableTenantGroup} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantGroupsUpdate(id: number, data: WritableTenantGroup, options?: any): AxiosPromise<TenantGroup> {
            return localVarFp.tenancyTenantGroupsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantsBulkDelete(options?: any): AxiosPromise<void> {
            return localVarFp.tenancyTenantsBulkDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WritableTenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantsBulkPartialUpdate(data: WritableTenant, options?: any): AxiosPromise<Tenant> {
            return localVarFp.tenancyTenantsBulkPartialUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WritableTenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantsBulkUpdate(data: WritableTenant, options?: any): AxiosPromise<Tenant> {
            return localVarFp.tenancyTenantsBulkUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WritableTenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantsCreate(data: WritableTenant, options?: any): AxiosPromise<Tenant> {
            return localVarFp.tenancyTenantsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantsDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.tenancyTenantsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [slug] 
         * @param {string} [created] 
         * @param {string} [createdGte] 
         * @param {string} [createdLte] 
         * @param {string} [lastUpdated] 
         * @param {string} [lastUpdatedGte] 
         * @param {string} [lastUpdatedLte] 
         * @param {string} [q] 
         * @param {string} [groupId] 
         * @param {string} [group] 
         * @param {string} [tag] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {string} [slugN] 
         * @param {string} [slugIc] 
         * @param {string} [slugNic] 
         * @param {string} [slugIew] 
         * @param {string} [slugNiew] 
         * @param {string} [slugIsw] 
         * @param {string} [slugNisw] 
         * @param {string} [slugIe] 
         * @param {string} [slugNie] 
         * @param {string} [groupIdN] 
         * @param {string} [groupN] 
         * @param {string} [tagN] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantsList(id?: string, name?: string, slug?: string, created?: string, createdGte?: string, createdLte?: string, lastUpdated?: string, lastUpdatedGte?: string, lastUpdatedLte?: string, q?: string, groupId?: string, group?: string, tag?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, slugN?: string, slugIc?: string, slugNic?: string, slugIew?: string, slugNiew?: string, slugIsw?: string, slugNisw?: string, slugIe?: string, slugNie?: string, groupIdN?: string, groupN?: string, tagN?: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse20058> {
            return localVarFp.tenancyTenantsList(id, name, slug, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, groupId, group, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, groupIdN, groupN, tagN, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant.
         * @param {WritableTenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantsPartialUpdate(id: number, data: WritableTenant, options?: any): AxiosPromise<Tenant> {
            return localVarFp.tenancyTenantsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantsRead(id: number, options?: any): AxiosPromise<Tenant> {
            return localVarFp.tenancyTenantsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tenant.
         * @param {WritableTenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenancyTenantsUpdate(id: number, data: WritableTenant, options?: any): AxiosPromise<Tenant> {
            return localVarFp.tenancyTenantsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for tenancyTenantGroupsBulkPartialUpdate operation in TenancyApi.
 * @export
 * @interface TenancyApiTenancyTenantGroupsBulkPartialUpdateRequest
 */
export interface TenancyApiTenancyTenantGroupsBulkPartialUpdateRequest {
    /**
     * 
     * @type {WritableTenantGroup}
     * @memberof TenancyApiTenancyTenantGroupsBulkPartialUpdate
     */
    readonly data: WritableTenantGroup
}

/**
 * Request parameters for tenancyTenantGroupsBulkUpdate operation in TenancyApi.
 * @export
 * @interface TenancyApiTenancyTenantGroupsBulkUpdateRequest
 */
export interface TenancyApiTenancyTenantGroupsBulkUpdateRequest {
    /**
     * 
     * @type {WritableTenantGroup}
     * @memberof TenancyApiTenancyTenantGroupsBulkUpdate
     */
    readonly data: WritableTenantGroup
}

/**
 * Request parameters for tenancyTenantGroupsCreate operation in TenancyApi.
 * @export
 * @interface TenancyApiTenancyTenantGroupsCreateRequest
 */
export interface TenancyApiTenancyTenantGroupsCreateRequest {
    /**
     * 
     * @type {WritableTenantGroup}
     * @memberof TenancyApiTenancyTenantGroupsCreate
     */
    readonly data: WritableTenantGroup
}

/**
 * Request parameters for tenancyTenantGroupsDelete operation in TenancyApi.
 * @export
 * @interface TenancyApiTenancyTenantGroupsDeleteRequest
 */
export interface TenancyApiTenancyTenantGroupsDeleteRequest {
    /**
     * A unique integer value identifying this tenant group.
     * @type {number}
     * @memberof TenancyApiTenancyTenantGroupsDelete
     */
    readonly id: number
}

/**
 * Request parameters for tenancyTenantGroupsList operation in TenancyApi.
 * @export
 * @interface TenancyApiTenancyTenantGroupsListRequest
 */
export interface TenancyApiTenancyTenantGroupsListRequest {
    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly id?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly slug?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly description?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly q?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly parentId?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly parent?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly idN?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly idLte?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly idLt?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly idGte?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly idGt?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly nameN?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly nameIc?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly nameNic?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly nameIew?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly nameNiew?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly nameIsw?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly nameNisw?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly nameIe?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly nameNie?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly slugN?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly slugIc?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly slugNic?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly slugIew?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly slugNiew?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly slugIsw?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly slugNisw?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly slugIe?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly slugNie?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly descriptionN?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly descriptionIc?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly descriptionNic?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly descriptionIew?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly descriptionNiew?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly descriptionIsw?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly descriptionNisw?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly descriptionIe?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly descriptionNie?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly parentIdN?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly parentN?: string

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof TenancyApiTenancyTenantGroupsList
     */
    readonly offset?: number
}

/**
 * Request parameters for tenancyTenantGroupsPartialUpdate operation in TenancyApi.
 * @export
 * @interface TenancyApiTenancyTenantGroupsPartialUpdateRequest
 */
export interface TenancyApiTenancyTenantGroupsPartialUpdateRequest {
    /**
     * A unique integer value identifying this tenant group.
     * @type {number}
     * @memberof TenancyApiTenancyTenantGroupsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {WritableTenantGroup}
     * @memberof TenancyApiTenancyTenantGroupsPartialUpdate
     */
    readonly data: WritableTenantGroup
}

/**
 * Request parameters for tenancyTenantGroupsRead operation in TenancyApi.
 * @export
 * @interface TenancyApiTenancyTenantGroupsReadRequest
 */
export interface TenancyApiTenancyTenantGroupsReadRequest {
    /**
     * A unique integer value identifying this tenant group.
     * @type {number}
     * @memberof TenancyApiTenancyTenantGroupsRead
     */
    readonly id: number
}

/**
 * Request parameters for tenancyTenantGroupsUpdate operation in TenancyApi.
 * @export
 * @interface TenancyApiTenancyTenantGroupsUpdateRequest
 */
export interface TenancyApiTenancyTenantGroupsUpdateRequest {
    /**
     * A unique integer value identifying this tenant group.
     * @type {number}
     * @memberof TenancyApiTenancyTenantGroupsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {WritableTenantGroup}
     * @memberof TenancyApiTenancyTenantGroupsUpdate
     */
    readonly data: WritableTenantGroup
}

/**
 * Request parameters for tenancyTenantsBulkPartialUpdate operation in TenancyApi.
 * @export
 * @interface TenancyApiTenancyTenantsBulkPartialUpdateRequest
 */
export interface TenancyApiTenancyTenantsBulkPartialUpdateRequest {
    /**
     * 
     * @type {WritableTenant}
     * @memberof TenancyApiTenancyTenantsBulkPartialUpdate
     */
    readonly data: WritableTenant
}

/**
 * Request parameters for tenancyTenantsBulkUpdate operation in TenancyApi.
 * @export
 * @interface TenancyApiTenancyTenantsBulkUpdateRequest
 */
export interface TenancyApiTenancyTenantsBulkUpdateRequest {
    /**
     * 
     * @type {WritableTenant}
     * @memberof TenancyApiTenancyTenantsBulkUpdate
     */
    readonly data: WritableTenant
}

/**
 * Request parameters for tenancyTenantsCreate operation in TenancyApi.
 * @export
 * @interface TenancyApiTenancyTenantsCreateRequest
 */
export interface TenancyApiTenancyTenantsCreateRequest {
    /**
     * 
     * @type {WritableTenant}
     * @memberof TenancyApiTenancyTenantsCreate
     */
    readonly data: WritableTenant
}

/**
 * Request parameters for tenancyTenantsDelete operation in TenancyApi.
 * @export
 * @interface TenancyApiTenancyTenantsDeleteRequest
 */
export interface TenancyApiTenancyTenantsDeleteRequest {
    /**
     * A unique integer value identifying this tenant.
     * @type {number}
     * @memberof TenancyApiTenancyTenantsDelete
     */
    readonly id: number
}

/**
 * Request parameters for tenancyTenantsList operation in TenancyApi.
 * @export
 * @interface TenancyApiTenancyTenantsListRequest
 */
export interface TenancyApiTenancyTenantsListRequest {
    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly id?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly slug?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly created?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly createdGte?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly createdLte?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly lastUpdated?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly lastUpdatedGte?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly lastUpdatedLte?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly q?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly groupId?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly group?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly tag?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly idN?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly idLte?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly idLt?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly idGte?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly idGt?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly nameN?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly nameIc?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly nameNic?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly nameIew?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly nameNiew?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly nameIsw?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly nameNisw?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly nameIe?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly nameNie?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly slugN?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly slugIc?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly slugNic?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly slugIew?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly slugNiew?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly slugIsw?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly slugNisw?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly slugIe?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly slugNie?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly groupIdN?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly groupN?: string

    /**
     * 
     * @type {string}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly tagN?: string

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof TenancyApiTenancyTenantsList
     */
    readonly offset?: number
}

/**
 * Request parameters for tenancyTenantsPartialUpdate operation in TenancyApi.
 * @export
 * @interface TenancyApiTenancyTenantsPartialUpdateRequest
 */
export interface TenancyApiTenancyTenantsPartialUpdateRequest {
    /**
     * A unique integer value identifying this tenant.
     * @type {number}
     * @memberof TenancyApiTenancyTenantsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {WritableTenant}
     * @memberof TenancyApiTenancyTenantsPartialUpdate
     */
    readonly data: WritableTenant
}

/**
 * Request parameters for tenancyTenantsRead operation in TenancyApi.
 * @export
 * @interface TenancyApiTenancyTenantsReadRequest
 */
export interface TenancyApiTenancyTenantsReadRequest {
    /**
     * A unique integer value identifying this tenant.
     * @type {number}
     * @memberof TenancyApiTenancyTenantsRead
     */
    readonly id: number
}

/**
 * Request parameters for tenancyTenantsUpdate operation in TenancyApi.
 * @export
 * @interface TenancyApiTenancyTenantsUpdateRequest
 */
export interface TenancyApiTenancyTenantsUpdateRequest {
    /**
     * A unique integer value identifying this tenant.
     * @type {number}
     * @memberof TenancyApiTenancyTenantsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {WritableTenant}
     * @memberof TenancyApiTenancyTenantsUpdate
     */
    readonly data: WritableTenant
}

/**
 * TenancyApi - object-oriented interface
 * @export
 * @class TenancyApi
 * @extends {BaseAPI}
 */
export class TenancyApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenancyApi
     */
    public tenancyTenantGroupsBulkDelete(options?: any) {
        return TenancyApiFp(this.configuration).tenancyTenantGroupsBulkDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenancyApiTenancyTenantGroupsBulkPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenancyApi
     */
    public tenancyTenantGroupsBulkPartialUpdate(requestParameters: TenancyApiTenancyTenantGroupsBulkPartialUpdateRequest, options?: any) {
        return TenancyApiFp(this.configuration).tenancyTenantGroupsBulkPartialUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenancyApiTenancyTenantGroupsBulkUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenancyApi
     */
    public tenancyTenantGroupsBulkUpdate(requestParameters: TenancyApiTenancyTenantGroupsBulkUpdateRequest, options?: any) {
        return TenancyApiFp(this.configuration).tenancyTenantGroupsBulkUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenancyApiTenancyTenantGroupsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenancyApi
     */
    public tenancyTenantGroupsCreate(requestParameters: TenancyApiTenancyTenantGroupsCreateRequest, options?: any) {
        return TenancyApiFp(this.configuration).tenancyTenantGroupsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenancyApiTenancyTenantGroupsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenancyApi
     */
    public tenancyTenantGroupsDelete(requestParameters: TenancyApiTenancyTenantGroupsDeleteRequest, options?: any) {
        return TenancyApiFp(this.configuration).tenancyTenantGroupsDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenancyApiTenancyTenantGroupsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenancyApi
     */
    public tenancyTenantGroupsList(requestParameters: TenancyApiTenancyTenantGroupsListRequest = {}, options?: any) {
        return TenancyApiFp(this.configuration).tenancyTenantGroupsList(requestParameters.id, requestParameters.name, requestParameters.slug, requestParameters.description, requestParameters.q, requestParameters.parentId, requestParameters.parent, requestParameters.idN, requestParameters.idLte, requestParameters.idLt, requestParameters.idGte, requestParameters.idGt, requestParameters.nameN, requestParameters.nameIc, requestParameters.nameNic, requestParameters.nameIew, requestParameters.nameNiew, requestParameters.nameIsw, requestParameters.nameNisw, requestParameters.nameIe, requestParameters.nameNie, requestParameters.slugN, requestParameters.slugIc, requestParameters.slugNic, requestParameters.slugIew, requestParameters.slugNiew, requestParameters.slugIsw, requestParameters.slugNisw, requestParameters.slugIe, requestParameters.slugNie, requestParameters.descriptionN, requestParameters.descriptionIc, requestParameters.descriptionNic, requestParameters.descriptionIew, requestParameters.descriptionNiew, requestParameters.descriptionIsw, requestParameters.descriptionNisw, requestParameters.descriptionIe, requestParameters.descriptionNie, requestParameters.parentIdN, requestParameters.parentN, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenancyApiTenancyTenantGroupsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenancyApi
     */
    public tenancyTenantGroupsPartialUpdate(requestParameters: TenancyApiTenancyTenantGroupsPartialUpdateRequest, options?: any) {
        return TenancyApiFp(this.configuration).tenancyTenantGroupsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenancyApiTenancyTenantGroupsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenancyApi
     */
    public tenancyTenantGroupsRead(requestParameters: TenancyApiTenancyTenantGroupsReadRequest, options?: any) {
        return TenancyApiFp(this.configuration).tenancyTenantGroupsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenancyApiTenancyTenantGroupsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenancyApi
     */
    public tenancyTenantGroupsUpdate(requestParameters: TenancyApiTenancyTenantGroupsUpdateRequest, options?: any) {
        return TenancyApiFp(this.configuration).tenancyTenantGroupsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenancyApi
     */
    public tenancyTenantsBulkDelete(options?: any) {
        return TenancyApiFp(this.configuration).tenancyTenantsBulkDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenancyApiTenancyTenantsBulkPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenancyApi
     */
    public tenancyTenantsBulkPartialUpdate(requestParameters: TenancyApiTenancyTenantsBulkPartialUpdateRequest, options?: any) {
        return TenancyApiFp(this.configuration).tenancyTenantsBulkPartialUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenancyApiTenancyTenantsBulkUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenancyApi
     */
    public tenancyTenantsBulkUpdate(requestParameters: TenancyApiTenancyTenantsBulkUpdateRequest, options?: any) {
        return TenancyApiFp(this.configuration).tenancyTenantsBulkUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenancyApiTenancyTenantsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenancyApi
     */
    public tenancyTenantsCreate(requestParameters: TenancyApiTenancyTenantsCreateRequest, options?: any) {
        return TenancyApiFp(this.configuration).tenancyTenantsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenancyApiTenancyTenantsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenancyApi
     */
    public tenancyTenantsDelete(requestParameters: TenancyApiTenancyTenantsDeleteRequest, options?: any) {
        return TenancyApiFp(this.configuration).tenancyTenantsDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenancyApiTenancyTenantsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenancyApi
     */
    public tenancyTenantsList(requestParameters: TenancyApiTenancyTenantsListRequest = {}, options?: any) {
        return TenancyApiFp(this.configuration).tenancyTenantsList(requestParameters.id, requestParameters.name, requestParameters.slug, requestParameters.created, requestParameters.createdGte, requestParameters.createdLte, requestParameters.lastUpdated, requestParameters.lastUpdatedGte, requestParameters.lastUpdatedLte, requestParameters.q, requestParameters.groupId, requestParameters.group, requestParameters.tag, requestParameters.idN, requestParameters.idLte, requestParameters.idLt, requestParameters.idGte, requestParameters.idGt, requestParameters.nameN, requestParameters.nameIc, requestParameters.nameNic, requestParameters.nameIew, requestParameters.nameNiew, requestParameters.nameIsw, requestParameters.nameNisw, requestParameters.nameIe, requestParameters.nameNie, requestParameters.slugN, requestParameters.slugIc, requestParameters.slugNic, requestParameters.slugIew, requestParameters.slugNiew, requestParameters.slugIsw, requestParameters.slugNisw, requestParameters.slugIe, requestParameters.slugNie, requestParameters.groupIdN, requestParameters.groupN, requestParameters.tagN, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenancyApiTenancyTenantsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenancyApi
     */
    public tenancyTenantsPartialUpdate(requestParameters: TenancyApiTenancyTenantsPartialUpdateRequest, options?: any) {
        return TenancyApiFp(this.configuration).tenancyTenantsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenancyApiTenancyTenantsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenancyApi
     */
    public tenancyTenantsRead(requestParameters: TenancyApiTenancyTenantsReadRequest, options?: any) {
        return TenancyApiFp(this.configuration).tenancyTenantsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenancyApiTenancyTenantsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenancyApi
     */
    public tenancyTenantsUpdate(requestParameters: TenancyApiTenancyTenantsUpdateRequest, options?: any) {
        return TenancyApiFp(this.configuration).tenancyTenantsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}
