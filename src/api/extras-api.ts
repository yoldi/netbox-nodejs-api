/* tslint:disable */
/* eslint-disable */
/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ConfigContext } from '../models';
// @ts-ignore
import { ContentType } from '../models';
// @ts-ignore
import { CustomField } from '../models';
// @ts-ignore
import { ExportTemplate } from '../models';
// @ts-ignore
import { ImageAttachment } from '../models';
// @ts-ignore
import { InlineResponse20037 } from '../models';
// @ts-ignore
import { InlineResponse20038 } from '../models';
// @ts-ignore
import { InlineResponse20039 } from '../models';
// @ts-ignore
import { InlineResponse20040 } from '../models';
// @ts-ignore
import { InlineResponse20041 } from '../models';
// @ts-ignore
import { InlineResponse20042 } from '../models';
// @ts-ignore
import { InlineResponse20043 } from '../models';
// @ts-ignore
import { InlineResponse20044 } from '../models';
// @ts-ignore
import { JobResult } from '../models';
// @ts-ignore
import { ObjectChange } from '../models';
// @ts-ignore
import { Tag } from '../models';
// @ts-ignore
import { WritableConfigContext } from '../models';
// @ts-ignore
import { WritableCustomField } from '../models';
/**
 * ExtrasApi - axios parameter creator
 * @export
 */
export const ExtrasApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasConfigContextsBulkDelete: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/extras/config-contexts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WritableConfigContext} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasConfigContextsBulkPartialUpdate: async (data: WritableConfigContext, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasConfigContextsBulkPartialUpdate', 'data', data)
            const localVarPath = `/extras/config-contexts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WritableConfigContext} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasConfigContextsBulkUpdate: async (data: WritableConfigContext, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasConfigContextsBulkUpdate', 'data', data)
            const localVarPath = `/extras/config-contexts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WritableConfigContext} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasConfigContextsCreate: async (data: WritableConfigContext, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasConfigContextsCreate', 'data', data)
            const localVarPath = `/extras/config-contexts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this config context.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasConfigContextsDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasConfigContextsDelete', 'id', id)
            const localVarPath = `/extras/config-contexts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [isActive] 
         * @param {string} [q] 
         * @param {string} [regionId] 
         * @param {string} [region] 
         * @param {string} [siteId] 
         * @param {string} [site] 
         * @param {string} [roleId] 
         * @param {string} [role] 
         * @param {string} [platformId] 
         * @param {string} [platform] 
         * @param {string} [clusterGroupId] 
         * @param {string} [clusterGroup] 
         * @param {string} [clusterId] 
         * @param {string} [tenantGroupId] 
         * @param {string} [tenantGroup] 
         * @param {string} [tenantId] 
         * @param {string} [tenant] 
         * @param {string} [tag] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {string} [regionIdN] 
         * @param {string} [regionN] 
         * @param {string} [siteIdN] 
         * @param {string} [siteN] 
         * @param {string} [roleIdN] 
         * @param {string} [roleN] 
         * @param {string} [platformIdN] 
         * @param {string} [platformN] 
         * @param {string} [clusterGroupIdN] 
         * @param {string} [clusterGroupN] 
         * @param {string} [clusterIdN] 
         * @param {string} [tenantGroupIdN] 
         * @param {string} [tenantGroupN] 
         * @param {string} [tenantIdN] 
         * @param {string} [tenantN] 
         * @param {string} [tagN] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasConfigContextsList: async (id?: string, name?: string, isActive?: string, q?: string, regionId?: string, region?: string, siteId?: string, site?: string, roleId?: string, role?: string, platformId?: string, platform?: string, clusterGroupId?: string, clusterGroup?: string, clusterId?: string, tenantGroupId?: string, tenantGroup?: string, tenantId?: string, tenant?: string, tag?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, regionIdN?: string, regionN?: string, siteIdN?: string, siteN?: string, roleIdN?: string, roleN?: string, platformIdN?: string, platformN?: string, clusterGroupIdN?: string, clusterGroupN?: string, clusterIdN?: string, tenantGroupIdN?: string, tenantGroupN?: string, tenantIdN?: string, tenantN?: string, tagN?: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/extras/config-contexts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (regionId !== undefined) {
                localVarQueryParameter['region_id'] = regionId;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (siteId !== undefined) {
                localVarQueryParameter['site_id'] = siteId;
            }

            if (site !== undefined) {
                localVarQueryParameter['site'] = site;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['role_id'] = roleId;
            }

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (platformId !== undefined) {
                localVarQueryParameter['platform_id'] = platformId;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (clusterGroupId !== undefined) {
                localVarQueryParameter['cluster_group_id'] = clusterGroupId;
            }

            if (clusterGroup !== undefined) {
                localVarQueryParameter['cluster_group'] = clusterGroup;
            }

            if (clusterId !== undefined) {
                localVarQueryParameter['cluster_id'] = clusterId;
            }

            if (tenantGroupId !== undefined) {
                localVarQueryParameter['tenant_group_id'] = tenantGroupId;
            }

            if (tenantGroup !== undefined) {
                localVarQueryParameter['tenant_group'] = tenantGroup;
            }

            if (tenantId !== undefined) {
                localVarQueryParameter['tenant_id'] = tenantId;
            }

            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (idN !== undefined) {
                localVarQueryParameter['id__n'] = idN;
            }

            if (idLte !== undefined) {
                localVarQueryParameter['id__lte'] = idLte;
            }

            if (idLt !== undefined) {
                localVarQueryParameter['id__lt'] = idLt;
            }

            if (idGte !== undefined) {
                localVarQueryParameter['id__gte'] = idGte;
            }

            if (idGt !== undefined) {
                localVarQueryParameter['id__gt'] = idGt;
            }

            if (nameN !== undefined) {
                localVarQueryParameter['name__n'] = nameN;
            }

            if (nameIc !== undefined) {
                localVarQueryParameter['name__ic'] = nameIc;
            }

            if (nameNic !== undefined) {
                localVarQueryParameter['name__nic'] = nameNic;
            }

            if (nameIew !== undefined) {
                localVarQueryParameter['name__iew'] = nameIew;
            }

            if (nameNiew !== undefined) {
                localVarQueryParameter['name__niew'] = nameNiew;
            }

            if (nameIsw !== undefined) {
                localVarQueryParameter['name__isw'] = nameIsw;
            }

            if (nameNisw !== undefined) {
                localVarQueryParameter['name__nisw'] = nameNisw;
            }

            if (nameIe !== undefined) {
                localVarQueryParameter['name__ie'] = nameIe;
            }

            if (nameNie !== undefined) {
                localVarQueryParameter['name__nie'] = nameNie;
            }

            if (regionIdN !== undefined) {
                localVarQueryParameter['region_id__n'] = regionIdN;
            }

            if (regionN !== undefined) {
                localVarQueryParameter['region__n'] = regionN;
            }

            if (siteIdN !== undefined) {
                localVarQueryParameter['site_id__n'] = siteIdN;
            }

            if (siteN !== undefined) {
                localVarQueryParameter['site__n'] = siteN;
            }

            if (roleIdN !== undefined) {
                localVarQueryParameter['role_id__n'] = roleIdN;
            }

            if (roleN !== undefined) {
                localVarQueryParameter['role__n'] = roleN;
            }

            if (platformIdN !== undefined) {
                localVarQueryParameter['platform_id__n'] = platformIdN;
            }

            if (platformN !== undefined) {
                localVarQueryParameter['platform__n'] = platformN;
            }

            if (clusterGroupIdN !== undefined) {
                localVarQueryParameter['cluster_group_id__n'] = clusterGroupIdN;
            }

            if (clusterGroupN !== undefined) {
                localVarQueryParameter['cluster_group__n'] = clusterGroupN;
            }

            if (clusterIdN !== undefined) {
                localVarQueryParameter['cluster_id__n'] = clusterIdN;
            }

            if (tenantGroupIdN !== undefined) {
                localVarQueryParameter['tenant_group_id__n'] = tenantGroupIdN;
            }

            if (tenantGroupN !== undefined) {
                localVarQueryParameter['tenant_group__n'] = tenantGroupN;
            }

            if (tenantIdN !== undefined) {
                localVarQueryParameter['tenant_id__n'] = tenantIdN;
            }

            if (tenantN !== undefined) {
                localVarQueryParameter['tenant__n'] = tenantN;
            }

            if (tagN !== undefined) {
                localVarQueryParameter['tag__n'] = tagN;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this config context.
         * @param {WritableConfigContext} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasConfigContextsPartialUpdate: async (id: number, data: WritableConfigContext, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasConfigContextsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasConfigContextsPartialUpdate', 'data', data)
            const localVarPath = `/extras/config-contexts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this config context.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasConfigContextsRead: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasConfigContextsRead', 'id', id)
            const localVarPath = `/extras/config-contexts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this config context.
         * @param {WritableConfigContext} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasConfigContextsUpdate: async (id: number, data: WritableConfigContext, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasConfigContextsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasConfigContextsUpdate', 'data', data)
            const localVarPath = `/extras/config-contexts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
         * @param {number} [id] 
         * @param {string} [appLabel] 
         * @param {string} [model] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasContentTypesList: async (id?: number, appLabel?: string, model?: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/extras/content-types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (appLabel !== undefined) {
                localVarQueryParameter['app_label'] = appLabel;
            }

            if (model !== undefined) {
                localVarQueryParameter['model'] = model;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
         * @param {number} id A unique integer value identifying this content type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasContentTypesRead: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasContentTypesRead', 'id', id)
            const localVarPath = `/extras/content-types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasCustomFieldsBulkDelete: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/extras/custom-fields/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WritableCustomField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasCustomFieldsBulkPartialUpdate: async (data: WritableCustomField, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasCustomFieldsBulkPartialUpdate', 'data', data)
            const localVarPath = `/extras/custom-fields/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WritableCustomField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasCustomFieldsBulkUpdate: async (data: WritableCustomField, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasCustomFieldsBulkUpdate', 'data', data)
            const localVarPath = `/extras/custom-fields/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WritableCustomField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasCustomFieldsCreate: async (data: WritableCustomField, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasCustomFieldsCreate', 'data', data)
            const localVarPath = `/extras/custom-fields/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this custom field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasCustomFieldsDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasCustomFieldsDelete', 'id', id)
            const localVarPath = `/extras/custom-fields/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [contentTypes] 
         * @param {string} [name] 
         * @param {string} [required] 
         * @param {string} [filterLogic] 
         * @param {number} [weight] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasCustomFieldsList: async (id?: number, contentTypes?: string, name?: string, required?: string, filterLogic?: string, weight?: number, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/extras/custom-fields/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (contentTypes !== undefined) {
                localVarQueryParameter['content_types'] = contentTypes;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (required !== undefined) {
                localVarQueryParameter['required'] = required;
            }

            if (filterLogic !== undefined) {
                localVarQueryParameter['filter_logic'] = filterLogic;
            }

            if (weight !== undefined) {
                localVarQueryParameter['weight'] = weight;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this custom field.
         * @param {WritableCustomField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasCustomFieldsPartialUpdate: async (id: number, data: WritableCustomField, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasCustomFieldsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasCustomFieldsPartialUpdate', 'data', data)
            const localVarPath = `/extras/custom-fields/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this custom field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasCustomFieldsRead: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasCustomFieldsRead', 'id', id)
            const localVarPath = `/extras/custom-fields/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this custom field.
         * @param {WritableCustomField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasCustomFieldsUpdate: async (id: number, data: WritableCustomField, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasCustomFieldsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasCustomFieldsUpdate', 'data', data)
            const localVarPath = `/extras/custom-fields/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasExportTemplatesBulkDelete: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/extras/export-templates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ExportTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasExportTemplatesBulkPartialUpdate: async (data: ExportTemplate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasExportTemplatesBulkPartialUpdate', 'data', data)
            const localVarPath = `/extras/export-templates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ExportTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasExportTemplatesBulkUpdate: async (data: ExportTemplate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasExportTemplatesBulkUpdate', 'data', data)
            const localVarPath = `/extras/export-templates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ExportTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasExportTemplatesCreate: async (data: ExportTemplate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasExportTemplatesCreate', 'data', data)
            const localVarPath = `/extras/export-templates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this export template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasExportTemplatesDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasExportTemplatesDelete', 'id', id)
            const localVarPath = `/extras/export-templates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [contentType] 
         * @param {string} [name] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [contentTypeN] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasExportTemplatesList: async (id?: string, contentType?: string, name?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, contentTypeN?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/extras/export-templates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (contentType !== undefined) {
                localVarQueryParameter['content_type'] = contentType;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (idN !== undefined) {
                localVarQueryParameter['id__n'] = idN;
            }

            if (idLte !== undefined) {
                localVarQueryParameter['id__lte'] = idLte;
            }

            if (idLt !== undefined) {
                localVarQueryParameter['id__lt'] = idLt;
            }

            if (idGte !== undefined) {
                localVarQueryParameter['id__gte'] = idGte;
            }

            if (idGt !== undefined) {
                localVarQueryParameter['id__gt'] = idGt;
            }

            if (contentTypeN !== undefined) {
                localVarQueryParameter['content_type__n'] = contentTypeN;
            }

            if (nameN !== undefined) {
                localVarQueryParameter['name__n'] = nameN;
            }

            if (nameIc !== undefined) {
                localVarQueryParameter['name__ic'] = nameIc;
            }

            if (nameNic !== undefined) {
                localVarQueryParameter['name__nic'] = nameNic;
            }

            if (nameIew !== undefined) {
                localVarQueryParameter['name__iew'] = nameIew;
            }

            if (nameNiew !== undefined) {
                localVarQueryParameter['name__niew'] = nameNiew;
            }

            if (nameIsw !== undefined) {
                localVarQueryParameter['name__isw'] = nameIsw;
            }

            if (nameNisw !== undefined) {
                localVarQueryParameter['name__nisw'] = nameNisw;
            }

            if (nameIe !== undefined) {
                localVarQueryParameter['name__ie'] = nameIe;
            }

            if (nameNie !== undefined) {
                localVarQueryParameter['name__nie'] = nameNie;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this export template.
         * @param {ExportTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasExportTemplatesPartialUpdate: async (id: number, data: ExportTemplate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasExportTemplatesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasExportTemplatesPartialUpdate', 'data', data)
            const localVarPath = `/extras/export-templates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this export template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasExportTemplatesRead: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasExportTemplatesRead', 'id', id)
            const localVarPath = `/extras/export-templates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this export template.
         * @param {ExportTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasExportTemplatesUpdate: async (id: number, data: ExportTemplate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasExportTemplatesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasExportTemplatesUpdate', 'data', data)
            const localVarPath = `/extras/export-templates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasImageAttachmentsBulkDelete: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/extras/image-attachments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ImageAttachment} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasImageAttachmentsBulkPartialUpdate: async (data: ImageAttachment, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasImageAttachmentsBulkPartialUpdate', 'data', data)
            const localVarPath = `/extras/image-attachments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ImageAttachment} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasImageAttachmentsBulkUpdate: async (data: ImageAttachment, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasImageAttachmentsBulkUpdate', 'data', data)
            const localVarPath = `/extras/image-attachments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ImageAttachment} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasImageAttachmentsCreate: async (data: ImageAttachment, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasImageAttachmentsCreate', 'data', data)
            const localVarPath = `/extras/image-attachments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image attachment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasImageAttachmentsDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasImageAttachmentsDelete', 'id', id)
            const localVarPath = `/extras/image-attachments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [contentTypeId] 
         * @param {string} [objectId] 
         * @param {string} [name] 
         * @param {string} [contentType] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [contentTypeIdN] 
         * @param {string} [objectIdN] 
         * @param {string} [objectIdLte] 
         * @param {string} [objectIdLt] 
         * @param {string} [objectIdGte] 
         * @param {string} [objectIdGt] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {string} [contentTypeN] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasImageAttachmentsList: async (id?: string, contentTypeId?: string, objectId?: string, name?: string, contentType?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, contentTypeIdN?: string, objectIdN?: string, objectIdLte?: string, objectIdLt?: string, objectIdGte?: string, objectIdGt?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, contentTypeN?: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/extras/image-attachments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (contentTypeId !== undefined) {
                localVarQueryParameter['content_type_id'] = contentTypeId;
            }

            if (objectId !== undefined) {
                localVarQueryParameter['object_id'] = objectId;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (contentType !== undefined) {
                localVarQueryParameter['content_type'] = contentType;
            }

            if (idN !== undefined) {
                localVarQueryParameter['id__n'] = idN;
            }

            if (idLte !== undefined) {
                localVarQueryParameter['id__lte'] = idLte;
            }

            if (idLt !== undefined) {
                localVarQueryParameter['id__lt'] = idLt;
            }

            if (idGte !== undefined) {
                localVarQueryParameter['id__gte'] = idGte;
            }

            if (idGt !== undefined) {
                localVarQueryParameter['id__gt'] = idGt;
            }

            if (contentTypeIdN !== undefined) {
                localVarQueryParameter['content_type_id__n'] = contentTypeIdN;
            }

            if (objectIdN !== undefined) {
                localVarQueryParameter['object_id__n'] = objectIdN;
            }

            if (objectIdLte !== undefined) {
                localVarQueryParameter['object_id__lte'] = objectIdLte;
            }

            if (objectIdLt !== undefined) {
                localVarQueryParameter['object_id__lt'] = objectIdLt;
            }

            if (objectIdGte !== undefined) {
                localVarQueryParameter['object_id__gte'] = objectIdGte;
            }

            if (objectIdGt !== undefined) {
                localVarQueryParameter['object_id__gt'] = objectIdGt;
            }

            if (nameN !== undefined) {
                localVarQueryParameter['name__n'] = nameN;
            }

            if (nameIc !== undefined) {
                localVarQueryParameter['name__ic'] = nameIc;
            }

            if (nameNic !== undefined) {
                localVarQueryParameter['name__nic'] = nameNic;
            }

            if (nameIew !== undefined) {
                localVarQueryParameter['name__iew'] = nameIew;
            }

            if (nameNiew !== undefined) {
                localVarQueryParameter['name__niew'] = nameNiew;
            }

            if (nameIsw !== undefined) {
                localVarQueryParameter['name__isw'] = nameIsw;
            }

            if (nameNisw !== undefined) {
                localVarQueryParameter['name__nisw'] = nameNisw;
            }

            if (nameIe !== undefined) {
                localVarQueryParameter['name__ie'] = nameIe;
            }

            if (nameNie !== undefined) {
                localVarQueryParameter['name__nie'] = nameNie;
            }

            if (contentTypeN !== undefined) {
                localVarQueryParameter['content_type__n'] = contentTypeN;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image attachment.
         * @param {ImageAttachment} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasImageAttachmentsPartialUpdate: async (id: number, data: ImageAttachment, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasImageAttachmentsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasImageAttachmentsPartialUpdate', 'data', data)
            const localVarPath = `/extras/image-attachments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image attachment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasImageAttachmentsRead: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasImageAttachmentsRead', 'id', id)
            const localVarPath = `/extras/image-attachments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image attachment.
         * @param {ImageAttachment} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasImageAttachmentsUpdate: async (id: number, data: ImageAttachment, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasImageAttachmentsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasImageAttachmentsUpdate', 'data', data)
            const localVarPath = `/extras/image-attachments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of job results
         * @param {string} [id] 
         * @param {string} [created] 
         * @param {string} [completed] 
         * @param {string} [status] 
         * @param {string} [user] 
         * @param {string} [objType] 
         * @param {string} [name] 
         * @param {string} [q] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [statusN] 
         * @param {string} [userN] 
         * @param {string} [objTypeN] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasJobResultsList: async (id?: string, created?: string, completed?: string, status?: string, user?: string, objType?: string, name?: string, q?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, statusN?: string, userN?: string, objTypeN?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/extras/job-results/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (created !== undefined) {
                localVarQueryParameter['created'] = created;
            }

            if (completed !== undefined) {
                localVarQueryParameter['completed'] = completed;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (objType !== undefined) {
                localVarQueryParameter['obj_type'] = objType;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (idN !== undefined) {
                localVarQueryParameter['id__n'] = idN;
            }

            if (idLte !== undefined) {
                localVarQueryParameter['id__lte'] = idLte;
            }

            if (idLt !== undefined) {
                localVarQueryParameter['id__lt'] = idLt;
            }

            if (idGte !== undefined) {
                localVarQueryParameter['id__gte'] = idGte;
            }

            if (idGt !== undefined) {
                localVarQueryParameter['id__gt'] = idGt;
            }

            if (statusN !== undefined) {
                localVarQueryParameter['status__n'] = statusN;
            }

            if (userN !== undefined) {
                localVarQueryParameter['user__n'] = userN;
            }

            if (objTypeN !== undefined) {
                localVarQueryParameter['obj_type__n'] = objTypeN;
            }

            if (nameN !== undefined) {
                localVarQueryParameter['name__n'] = nameN;
            }

            if (nameIc !== undefined) {
                localVarQueryParameter['name__ic'] = nameIc;
            }

            if (nameNic !== undefined) {
                localVarQueryParameter['name__nic'] = nameNic;
            }

            if (nameIew !== undefined) {
                localVarQueryParameter['name__iew'] = nameIew;
            }

            if (nameNiew !== undefined) {
                localVarQueryParameter['name__niew'] = nameNiew;
            }

            if (nameIsw !== undefined) {
                localVarQueryParameter['name__isw'] = nameIsw;
            }

            if (nameNisw !== undefined) {
                localVarQueryParameter['name__nisw'] = nameNisw;
            }

            if (nameIe !== undefined) {
                localVarQueryParameter['name__ie'] = nameIe;
            }

            if (nameNie !== undefined) {
                localVarQueryParameter['name__nie'] = nameNie;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of job results
         * @param {number} id A unique integer value identifying this job result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasJobResultsRead: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasJobResultsRead', 'id', id)
            const localVarPath = `/extras/job-results/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of recent changes.
         * @param {string} [id] 
         * @param {string} [user] 
         * @param {string} [userName] 
         * @param {string} [requestId] 
         * @param {string} [action] 
         * @param {string} [changedObjectTypeId] 
         * @param {string} [changedObjectId] 
         * @param {string} [objectRepr] 
         * @param {string} [q] 
         * @param {string} [time] 
         * @param {string} [changedObjectType] 
         * @param {string} [userId] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [userN] 
         * @param {string} [userNameN] 
         * @param {string} [userNameIc] 
         * @param {string} [userNameNic] 
         * @param {string} [userNameIew] 
         * @param {string} [userNameNiew] 
         * @param {string} [userNameIsw] 
         * @param {string} [userNameNisw] 
         * @param {string} [userNameIe] 
         * @param {string} [userNameNie] 
         * @param {string} [actionN] 
         * @param {string} [changedObjectTypeIdN] 
         * @param {string} [changedObjectIdN] 
         * @param {string} [changedObjectIdLte] 
         * @param {string} [changedObjectIdLt] 
         * @param {string} [changedObjectIdGte] 
         * @param {string} [changedObjectIdGt] 
         * @param {string} [objectReprN] 
         * @param {string} [objectReprIc] 
         * @param {string} [objectReprNic] 
         * @param {string} [objectReprIew] 
         * @param {string} [objectReprNiew] 
         * @param {string} [objectReprIsw] 
         * @param {string} [objectReprNisw] 
         * @param {string} [objectReprIe] 
         * @param {string} [objectReprNie] 
         * @param {string} [changedObjectTypeN] 
         * @param {string} [userIdN] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasObjectChangesList: async (id?: string, user?: string, userName?: string, requestId?: string, action?: string, changedObjectTypeId?: string, changedObjectId?: string, objectRepr?: string, q?: string, time?: string, changedObjectType?: string, userId?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, userN?: string, userNameN?: string, userNameIc?: string, userNameNic?: string, userNameIew?: string, userNameNiew?: string, userNameIsw?: string, userNameNisw?: string, userNameIe?: string, userNameNie?: string, actionN?: string, changedObjectTypeIdN?: string, changedObjectIdN?: string, changedObjectIdLte?: string, changedObjectIdLt?: string, changedObjectIdGte?: string, changedObjectIdGt?: string, objectReprN?: string, objectReprIc?: string, objectReprNic?: string, objectReprIew?: string, objectReprNiew?: string, objectReprIsw?: string, objectReprNisw?: string, objectReprIe?: string, objectReprNie?: string, changedObjectTypeN?: string, userIdN?: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/extras/object-changes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (userName !== undefined) {
                localVarQueryParameter['user_name'] = userName;
            }

            if (requestId !== undefined) {
                localVarQueryParameter['request_id'] = requestId;
            }

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (changedObjectTypeId !== undefined) {
                localVarQueryParameter['changed_object_type_id'] = changedObjectTypeId;
            }

            if (changedObjectId !== undefined) {
                localVarQueryParameter['changed_object_id'] = changedObjectId;
            }

            if (objectRepr !== undefined) {
                localVarQueryParameter['object_repr'] = objectRepr;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (time !== undefined) {
                localVarQueryParameter['time'] = time;
            }

            if (changedObjectType !== undefined) {
                localVarQueryParameter['changed_object_type'] = changedObjectType;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (idN !== undefined) {
                localVarQueryParameter['id__n'] = idN;
            }

            if (idLte !== undefined) {
                localVarQueryParameter['id__lte'] = idLte;
            }

            if (idLt !== undefined) {
                localVarQueryParameter['id__lt'] = idLt;
            }

            if (idGte !== undefined) {
                localVarQueryParameter['id__gte'] = idGte;
            }

            if (idGt !== undefined) {
                localVarQueryParameter['id__gt'] = idGt;
            }

            if (userN !== undefined) {
                localVarQueryParameter['user__n'] = userN;
            }

            if (userNameN !== undefined) {
                localVarQueryParameter['user_name__n'] = userNameN;
            }

            if (userNameIc !== undefined) {
                localVarQueryParameter['user_name__ic'] = userNameIc;
            }

            if (userNameNic !== undefined) {
                localVarQueryParameter['user_name__nic'] = userNameNic;
            }

            if (userNameIew !== undefined) {
                localVarQueryParameter['user_name__iew'] = userNameIew;
            }

            if (userNameNiew !== undefined) {
                localVarQueryParameter['user_name__niew'] = userNameNiew;
            }

            if (userNameIsw !== undefined) {
                localVarQueryParameter['user_name__isw'] = userNameIsw;
            }

            if (userNameNisw !== undefined) {
                localVarQueryParameter['user_name__nisw'] = userNameNisw;
            }

            if (userNameIe !== undefined) {
                localVarQueryParameter['user_name__ie'] = userNameIe;
            }

            if (userNameNie !== undefined) {
                localVarQueryParameter['user_name__nie'] = userNameNie;
            }

            if (actionN !== undefined) {
                localVarQueryParameter['action__n'] = actionN;
            }

            if (changedObjectTypeIdN !== undefined) {
                localVarQueryParameter['changed_object_type_id__n'] = changedObjectTypeIdN;
            }

            if (changedObjectIdN !== undefined) {
                localVarQueryParameter['changed_object_id__n'] = changedObjectIdN;
            }

            if (changedObjectIdLte !== undefined) {
                localVarQueryParameter['changed_object_id__lte'] = changedObjectIdLte;
            }

            if (changedObjectIdLt !== undefined) {
                localVarQueryParameter['changed_object_id__lt'] = changedObjectIdLt;
            }

            if (changedObjectIdGte !== undefined) {
                localVarQueryParameter['changed_object_id__gte'] = changedObjectIdGte;
            }

            if (changedObjectIdGt !== undefined) {
                localVarQueryParameter['changed_object_id__gt'] = changedObjectIdGt;
            }

            if (objectReprN !== undefined) {
                localVarQueryParameter['object_repr__n'] = objectReprN;
            }

            if (objectReprIc !== undefined) {
                localVarQueryParameter['object_repr__ic'] = objectReprIc;
            }

            if (objectReprNic !== undefined) {
                localVarQueryParameter['object_repr__nic'] = objectReprNic;
            }

            if (objectReprIew !== undefined) {
                localVarQueryParameter['object_repr__iew'] = objectReprIew;
            }

            if (objectReprNiew !== undefined) {
                localVarQueryParameter['object_repr__niew'] = objectReprNiew;
            }

            if (objectReprIsw !== undefined) {
                localVarQueryParameter['object_repr__isw'] = objectReprIsw;
            }

            if (objectReprNisw !== undefined) {
                localVarQueryParameter['object_repr__nisw'] = objectReprNisw;
            }

            if (objectReprIe !== undefined) {
                localVarQueryParameter['object_repr__ie'] = objectReprIe;
            }

            if (objectReprNie !== undefined) {
                localVarQueryParameter['object_repr__nie'] = objectReprNie;
            }

            if (changedObjectTypeN !== undefined) {
                localVarQueryParameter['changed_object_type__n'] = changedObjectTypeN;
            }

            if (userIdN !== undefined) {
                localVarQueryParameter['user_id__n'] = userIdN;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of recent changes.
         * @param {number} id A unique integer value identifying this object change.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasObjectChangesRead: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasObjectChangesRead', 'id', id)
            const localVarPath = `/extras/object-changes/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Compile all reports and their related results (if any). Result data is deferred in the list view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasReportsList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/extras/reports/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single Report identified as \"<module>.<report>\".
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasReportsRead: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasReportsRead', 'id', id)
            const localVarPath = `/extras/reports/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Run a Report identified as \"<module>.<script>\" and return the pending JobResult as the result
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasReportsRun: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasReportsRun', 'id', id)
            const localVarPath = `/extras/reports/{id}/run/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasScriptsList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/extras/scripts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasScriptsRead: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasScriptsRead', 'id', id)
            const localVarPath = `/extras/scripts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasTagsBulkDelete: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/extras/tags/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasTagsBulkPartialUpdate: async (data: Tag, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasTagsBulkPartialUpdate', 'data', data)
            const localVarPath = `/extras/tags/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasTagsBulkUpdate: async (data: Tag, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasTagsBulkUpdate', 'data', data)
            const localVarPath = `/extras/tags/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasTagsCreate: async (data: Tag, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasTagsCreate', 'data', data)
            const localVarPath = `/extras/tags/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasTagsDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasTagsDelete', 'id', id)
            const localVarPath = `/extras/tags/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [slug] 
         * @param {string} [color] 
         * @param {string} [q] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {string} [slugN] 
         * @param {string} [slugIc] 
         * @param {string} [slugNic] 
         * @param {string} [slugIew] 
         * @param {string} [slugNiew] 
         * @param {string} [slugIsw] 
         * @param {string} [slugNisw] 
         * @param {string} [slugIe] 
         * @param {string} [slugNie] 
         * @param {string} [colorN] 
         * @param {string} [colorIc] 
         * @param {string} [colorNic] 
         * @param {string} [colorIew] 
         * @param {string} [colorNiew] 
         * @param {string} [colorIsw] 
         * @param {string} [colorNisw] 
         * @param {string} [colorIe] 
         * @param {string} [colorNie] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasTagsList: async (id?: string, name?: string, slug?: string, color?: string, q?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, slugN?: string, slugIc?: string, slugNic?: string, slugIew?: string, slugNiew?: string, slugIsw?: string, slugNisw?: string, slugIe?: string, slugNie?: string, colorN?: string, colorIc?: string, colorNic?: string, colorIew?: string, colorNiew?: string, colorIsw?: string, colorNisw?: string, colorIe?: string, colorNie?: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/extras/tags/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (slug !== undefined) {
                localVarQueryParameter['slug'] = slug;
            }

            if (color !== undefined) {
                localVarQueryParameter['color'] = color;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (idN !== undefined) {
                localVarQueryParameter['id__n'] = idN;
            }

            if (idLte !== undefined) {
                localVarQueryParameter['id__lte'] = idLte;
            }

            if (idLt !== undefined) {
                localVarQueryParameter['id__lt'] = idLt;
            }

            if (idGte !== undefined) {
                localVarQueryParameter['id__gte'] = idGte;
            }

            if (idGt !== undefined) {
                localVarQueryParameter['id__gt'] = idGt;
            }

            if (nameN !== undefined) {
                localVarQueryParameter['name__n'] = nameN;
            }

            if (nameIc !== undefined) {
                localVarQueryParameter['name__ic'] = nameIc;
            }

            if (nameNic !== undefined) {
                localVarQueryParameter['name__nic'] = nameNic;
            }

            if (nameIew !== undefined) {
                localVarQueryParameter['name__iew'] = nameIew;
            }

            if (nameNiew !== undefined) {
                localVarQueryParameter['name__niew'] = nameNiew;
            }

            if (nameIsw !== undefined) {
                localVarQueryParameter['name__isw'] = nameIsw;
            }

            if (nameNisw !== undefined) {
                localVarQueryParameter['name__nisw'] = nameNisw;
            }

            if (nameIe !== undefined) {
                localVarQueryParameter['name__ie'] = nameIe;
            }

            if (nameNie !== undefined) {
                localVarQueryParameter['name__nie'] = nameNie;
            }

            if (slugN !== undefined) {
                localVarQueryParameter['slug__n'] = slugN;
            }

            if (slugIc !== undefined) {
                localVarQueryParameter['slug__ic'] = slugIc;
            }

            if (slugNic !== undefined) {
                localVarQueryParameter['slug__nic'] = slugNic;
            }

            if (slugIew !== undefined) {
                localVarQueryParameter['slug__iew'] = slugIew;
            }

            if (slugNiew !== undefined) {
                localVarQueryParameter['slug__niew'] = slugNiew;
            }

            if (slugIsw !== undefined) {
                localVarQueryParameter['slug__isw'] = slugIsw;
            }

            if (slugNisw !== undefined) {
                localVarQueryParameter['slug__nisw'] = slugNisw;
            }

            if (slugIe !== undefined) {
                localVarQueryParameter['slug__ie'] = slugIe;
            }

            if (slugNie !== undefined) {
                localVarQueryParameter['slug__nie'] = slugNie;
            }

            if (colorN !== undefined) {
                localVarQueryParameter['color__n'] = colorN;
            }

            if (colorIc !== undefined) {
                localVarQueryParameter['color__ic'] = colorIc;
            }

            if (colorNic !== undefined) {
                localVarQueryParameter['color__nic'] = colorNic;
            }

            if (colorIew !== undefined) {
                localVarQueryParameter['color__iew'] = colorIew;
            }

            if (colorNiew !== undefined) {
                localVarQueryParameter['color__niew'] = colorNiew;
            }

            if (colorIsw !== undefined) {
                localVarQueryParameter['color__isw'] = colorIsw;
            }

            if (colorNisw !== undefined) {
                localVarQueryParameter['color__nisw'] = colorNisw;
            }

            if (colorIe !== undefined) {
                localVarQueryParameter['color__ie'] = colorIe;
            }

            if (colorNie !== undefined) {
                localVarQueryParameter['color__nie'] = colorNie;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tag.
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasTagsPartialUpdate: async (id: number, data: Tag, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasTagsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasTagsPartialUpdate', 'data', data)
            const localVarPath = `/extras/tags/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasTagsRead: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasTagsRead', 'id', id)
            const localVarPath = `/extras/tags/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tag.
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasTagsUpdate: async (id: number, data: Tag, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extrasTagsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('extrasTagsUpdate', 'data', data)
            const localVarPath = `/extras/tags/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExtrasApi - functional programming interface
 * @export
 */
export const ExtrasApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExtrasApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasConfigContextsBulkDelete(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasConfigContextsBulkDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WritableConfigContext} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasConfigContextsBulkPartialUpdate(data: WritableConfigContext, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigContext>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasConfigContextsBulkPartialUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WritableConfigContext} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasConfigContextsBulkUpdate(data: WritableConfigContext, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigContext>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasConfigContextsBulkUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WritableConfigContext} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasConfigContextsCreate(data: WritableConfigContext, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigContext>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasConfigContextsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this config context.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasConfigContextsDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasConfigContextsDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [isActive] 
         * @param {string} [q] 
         * @param {string} [regionId] 
         * @param {string} [region] 
         * @param {string} [siteId] 
         * @param {string} [site] 
         * @param {string} [roleId] 
         * @param {string} [role] 
         * @param {string} [platformId] 
         * @param {string} [platform] 
         * @param {string} [clusterGroupId] 
         * @param {string} [clusterGroup] 
         * @param {string} [clusterId] 
         * @param {string} [tenantGroupId] 
         * @param {string} [tenantGroup] 
         * @param {string} [tenantId] 
         * @param {string} [tenant] 
         * @param {string} [tag] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {string} [regionIdN] 
         * @param {string} [regionN] 
         * @param {string} [siteIdN] 
         * @param {string} [siteN] 
         * @param {string} [roleIdN] 
         * @param {string} [roleN] 
         * @param {string} [platformIdN] 
         * @param {string} [platformN] 
         * @param {string} [clusterGroupIdN] 
         * @param {string} [clusterGroupN] 
         * @param {string} [clusterIdN] 
         * @param {string} [tenantGroupIdN] 
         * @param {string} [tenantGroupN] 
         * @param {string} [tenantIdN] 
         * @param {string} [tenantN] 
         * @param {string} [tagN] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasConfigContextsList(id?: string, name?: string, isActive?: string, q?: string, regionId?: string, region?: string, siteId?: string, site?: string, roleId?: string, role?: string, platformId?: string, platform?: string, clusterGroupId?: string, clusterGroup?: string, clusterId?: string, tenantGroupId?: string, tenantGroup?: string, tenantId?: string, tenant?: string, tag?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, regionIdN?: string, regionN?: string, siteIdN?: string, siteN?: string, roleIdN?: string, roleN?: string, platformIdN?: string, platformN?: string, clusterGroupIdN?: string, clusterGroupN?: string, clusterIdN?: string, tenantGroupIdN?: string, tenantGroupN?: string, tenantIdN?: string, tenantN?: string, tagN?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20037>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasConfigContextsList(id, name, isActive, q, regionId, region, siteId, site, roleId, role, platformId, platform, clusterGroupId, clusterGroup, clusterId, tenantGroupId, tenantGroup, tenantId, tenant, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, regionIdN, regionN, siteIdN, siteN, roleIdN, roleN, platformIdN, platformN, clusterGroupIdN, clusterGroupN, clusterIdN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, tagN, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this config context.
         * @param {WritableConfigContext} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasConfigContextsPartialUpdate(id: number, data: WritableConfigContext, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigContext>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasConfigContextsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this config context.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasConfigContextsRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigContext>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasConfigContextsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this config context.
         * @param {WritableConfigContext} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasConfigContextsUpdate(id: number, data: WritableConfigContext, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigContext>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasConfigContextsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
         * @param {number} [id] 
         * @param {string} [appLabel] 
         * @param {string} [model] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasContentTypesList(id?: number, appLabel?: string, model?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20038>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasContentTypesList(id, appLabel, model, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
         * @param {number} id A unique integer value identifying this content type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasContentTypesRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasContentTypesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasCustomFieldsBulkDelete(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasCustomFieldsBulkDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WritableCustomField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasCustomFieldsBulkPartialUpdate(data: WritableCustomField, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomField>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasCustomFieldsBulkPartialUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WritableCustomField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasCustomFieldsBulkUpdate(data: WritableCustomField, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomField>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasCustomFieldsBulkUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WritableCustomField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasCustomFieldsCreate(data: WritableCustomField, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomField>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasCustomFieldsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this custom field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasCustomFieldsDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasCustomFieldsDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [contentTypes] 
         * @param {string} [name] 
         * @param {string} [required] 
         * @param {string} [filterLogic] 
         * @param {number} [weight] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasCustomFieldsList(id?: number, contentTypes?: string, name?: string, required?: string, filterLogic?: string, weight?: number, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20039>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasCustomFieldsList(id, contentTypes, name, required, filterLogic, weight, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this custom field.
         * @param {WritableCustomField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasCustomFieldsPartialUpdate(id: number, data: WritableCustomField, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomField>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasCustomFieldsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this custom field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasCustomFieldsRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomField>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasCustomFieldsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this custom field.
         * @param {WritableCustomField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasCustomFieldsUpdate(id: number, data: WritableCustomField, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomField>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasCustomFieldsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasExportTemplatesBulkDelete(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasExportTemplatesBulkDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ExportTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasExportTemplatesBulkPartialUpdate(data: ExportTemplate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasExportTemplatesBulkPartialUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ExportTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasExportTemplatesBulkUpdate(data: ExportTemplate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasExportTemplatesBulkUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ExportTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasExportTemplatesCreate(data: ExportTemplate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasExportTemplatesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this export template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasExportTemplatesDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasExportTemplatesDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [contentType] 
         * @param {string} [name] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [contentTypeN] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasExportTemplatesList(id?: string, contentType?: string, name?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, contentTypeN?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20040>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasExportTemplatesList(id, contentType, name, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this export template.
         * @param {ExportTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasExportTemplatesPartialUpdate(id: number, data: ExportTemplate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasExportTemplatesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this export template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasExportTemplatesRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasExportTemplatesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this export template.
         * @param {ExportTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasExportTemplatesUpdate(id: number, data: ExportTemplate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasExportTemplatesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasImageAttachmentsBulkDelete(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasImageAttachmentsBulkDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ImageAttachment} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasImageAttachmentsBulkPartialUpdate(data: ImageAttachment, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageAttachment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasImageAttachmentsBulkPartialUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ImageAttachment} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasImageAttachmentsBulkUpdate(data: ImageAttachment, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageAttachment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasImageAttachmentsBulkUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ImageAttachment} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasImageAttachmentsCreate(data: ImageAttachment, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageAttachment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasImageAttachmentsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image attachment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasImageAttachmentsDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasImageAttachmentsDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [contentTypeId] 
         * @param {string} [objectId] 
         * @param {string} [name] 
         * @param {string} [contentType] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [contentTypeIdN] 
         * @param {string} [objectIdN] 
         * @param {string} [objectIdLte] 
         * @param {string} [objectIdLt] 
         * @param {string} [objectIdGte] 
         * @param {string} [objectIdGt] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {string} [contentTypeN] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasImageAttachmentsList(id?: string, contentTypeId?: string, objectId?: string, name?: string, contentType?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, contentTypeIdN?: string, objectIdN?: string, objectIdLte?: string, objectIdLt?: string, objectIdGte?: string, objectIdGt?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, contentTypeN?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20041>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasImageAttachmentsList(id, contentTypeId, objectId, name, contentType, idN, idLte, idLt, idGte, idGt, contentTypeIdN, objectIdN, objectIdLte, objectIdLt, objectIdGte, objectIdGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, contentTypeN, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image attachment.
         * @param {ImageAttachment} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasImageAttachmentsPartialUpdate(id: number, data: ImageAttachment, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageAttachment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasImageAttachmentsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image attachment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasImageAttachmentsRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageAttachment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasImageAttachmentsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image attachment.
         * @param {ImageAttachment} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasImageAttachmentsUpdate(id: number, data: ImageAttachment, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageAttachment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasImageAttachmentsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of job results
         * @param {string} [id] 
         * @param {string} [created] 
         * @param {string} [completed] 
         * @param {string} [status] 
         * @param {string} [user] 
         * @param {string} [objType] 
         * @param {string} [name] 
         * @param {string} [q] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [statusN] 
         * @param {string} [userN] 
         * @param {string} [objTypeN] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasJobResultsList(id?: string, created?: string, completed?: string, status?: string, user?: string, objType?: string, name?: string, q?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, statusN?: string, userN?: string, objTypeN?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20042>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasJobResultsList(id, created, completed, status, user, objType, name, q, idN, idLte, idLt, idGte, idGt, statusN, userN, objTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of job results
         * @param {number} id A unique integer value identifying this job result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasJobResultsRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasJobResultsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of recent changes.
         * @param {string} [id] 
         * @param {string} [user] 
         * @param {string} [userName] 
         * @param {string} [requestId] 
         * @param {string} [action] 
         * @param {string} [changedObjectTypeId] 
         * @param {string} [changedObjectId] 
         * @param {string} [objectRepr] 
         * @param {string} [q] 
         * @param {string} [time] 
         * @param {string} [changedObjectType] 
         * @param {string} [userId] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [userN] 
         * @param {string} [userNameN] 
         * @param {string} [userNameIc] 
         * @param {string} [userNameNic] 
         * @param {string} [userNameIew] 
         * @param {string} [userNameNiew] 
         * @param {string} [userNameIsw] 
         * @param {string} [userNameNisw] 
         * @param {string} [userNameIe] 
         * @param {string} [userNameNie] 
         * @param {string} [actionN] 
         * @param {string} [changedObjectTypeIdN] 
         * @param {string} [changedObjectIdN] 
         * @param {string} [changedObjectIdLte] 
         * @param {string} [changedObjectIdLt] 
         * @param {string} [changedObjectIdGte] 
         * @param {string} [changedObjectIdGt] 
         * @param {string} [objectReprN] 
         * @param {string} [objectReprIc] 
         * @param {string} [objectReprNic] 
         * @param {string} [objectReprIew] 
         * @param {string} [objectReprNiew] 
         * @param {string} [objectReprIsw] 
         * @param {string} [objectReprNisw] 
         * @param {string} [objectReprIe] 
         * @param {string} [objectReprNie] 
         * @param {string} [changedObjectTypeN] 
         * @param {string} [userIdN] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasObjectChangesList(id?: string, user?: string, userName?: string, requestId?: string, action?: string, changedObjectTypeId?: string, changedObjectId?: string, objectRepr?: string, q?: string, time?: string, changedObjectType?: string, userId?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, userN?: string, userNameN?: string, userNameIc?: string, userNameNic?: string, userNameIew?: string, userNameNiew?: string, userNameIsw?: string, userNameNisw?: string, userNameIe?: string, userNameNie?: string, actionN?: string, changedObjectTypeIdN?: string, changedObjectIdN?: string, changedObjectIdLte?: string, changedObjectIdLt?: string, changedObjectIdGte?: string, changedObjectIdGt?: string, objectReprN?: string, objectReprIc?: string, objectReprNic?: string, objectReprIew?: string, objectReprNiew?: string, objectReprIsw?: string, objectReprNisw?: string, objectReprIe?: string, objectReprNie?: string, changedObjectTypeN?: string, userIdN?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20043>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasObjectChangesList(id, user, userName, requestId, action, changedObjectTypeId, changedObjectId, objectRepr, q, time, changedObjectType, userId, idN, idLte, idLt, idGte, idGt, userN, userNameN, userNameIc, userNameNic, userNameIew, userNameNiew, userNameIsw, userNameNisw, userNameIe, userNameNie, actionN, changedObjectTypeIdN, changedObjectIdN, changedObjectIdLte, changedObjectIdLt, changedObjectIdGte, changedObjectIdGt, objectReprN, objectReprIc, objectReprNic, objectReprIew, objectReprNiew, objectReprIsw, objectReprNisw, objectReprIe, objectReprNie, changedObjectTypeN, userIdN, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of recent changes.
         * @param {number} id A unique integer value identifying this object change.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasObjectChangesRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectChange>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasObjectChangesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Compile all reports and their related results (if any). Result data is deferred in the list view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasReportsList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasReportsList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a single Report identified as \"<module>.<report>\".
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasReportsRead(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasReportsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Run a Report identified as \"<module>.<script>\" and return the pending JobResult as the result
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasReportsRun(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasReportsRun(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasScriptsList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasScriptsList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasScriptsRead(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasScriptsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasTagsBulkDelete(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasTagsBulkDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasTagsBulkPartialUpdate(data: Tag, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasTagsBulkPartialUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasTagsBulkUpdate(data: Tag, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasTagsBulkUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasTagsCreate(data: Tag, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasTagsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasTagsDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasTagsDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [slug] 
         * @param {string} [color] 
         * @param {string} [q] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {string} [slugN] 
         * @param {string} [slugIc] 
         * @param {string} [slugNic] 
         * @param {string} [slugIew] 
         * @param {string} [slugNiew] 
         * @param {string} [slugIsw] 
         * @param {string} [slugNisw] 
         * @param {string} [slugIe] 
         * @param {string} [slugNie] 
         * @param {string} [colorN] 
         * @param {string} [colorIc] 
         * @param {string} [colorNic] 
         * @param {string} [colorIew] 
         * @param {string} [colorNiew] 
         * @param {string} [colorIsw] 
         * @param {string} [colorNisw] 
         * @param {string} [colorIe] 
         * @param {string} [colorNie] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasTagsList(id?: string, name?: string, slug?: string, color?: string, q?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, slugN?: string, slugIc?: string, slugNic?: string, slugIew?: string, slugNiew?: string, slugIsw?: string, slugNisw?: string, slugIe?: string, slugNie?: string, colorN?: string, colorIc?: string, colorNic?: string, colorIew?: string, colorNiew?: string, colorIsw?: string, colorNisw?: string, colorIe?: string, colorNie?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20044>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasTagsList(id, name, slug, color, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tag.
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasTagsPartialUpdate(id: number, data: Tag, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasTagsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasTagsRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasTagsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tag.
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasTagsUpdate(id: number, data: Tag, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasTagsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExtrasApi - factory interface
 * @export
 */
export const ExtrasApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExtrasApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasConfigContextsBulkDelete(options?: any): AxiosPromise<void> {
            return localVarFp.extrasConfigContextsBulkDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WritableConfigContext} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasConfigContextsBulkPartialUpdate(data: WritableConfigContext, options?: any): AxiosPromise<ConfigContext> {
            return localVarFp.extrasConfigContextsBulkPartialUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WritableConfigContext} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasConfigContextsBulkUpdate(data: WritableConfigContext, options?: any): AxiosPromise<ConfigContext> {
            return localVarFp.extrasConfigContextsBulkUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WritableConfigContext} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasConfigContextsCreate(data: WritableConfigContext, options?: any): AxiosPromise<ConfigContext> {
            return localVarFp.extrasConfigContextsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this config context.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasConfigContextsDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.extrasConfigContextsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [isActive] 
         * @param {string} [q] 
         * @param {string} [regionId] 
         * @param {string} [region] 
         * @param {string} [siteId] 
         * @param {string} [site] 
         * @param {string} [roleId] 
         * @param {string} [role] 
         * @param {string} [platformId] 
         * @param {string} [platform] 
         * @param {string} [clusterGroupId] 
         * @param {string} [clusterGroup] 
         * @param {string} [clusterId] 
         * @param {string} [tenantGroupId] 
         * @param {string} [tenantGroup] 
         * @param {string} [tenantId] 
         * @param {string} [tenant] 
         * @param {string} [tag] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {string} [regionIdN] 
         * @param {string} [regionN] 
         * @param {string} [siteIdN] 
         * @param {string} [siteN] 
         * @param {string} [roleIdN] 
         * @param {string} [roleN] 
         * @param {string} [platformIdN] 
         * @param {string} [platformN] 
         * @param {string} [clusterGroupIdN] 
         * @param {string} [clusterGroupN] 
         * @param {string} [clusterIdN] 
         * @param {string} [tenantGroupIdN] 
         * @param {string} [tenantGroupN] 
         * @param {string} [tenantIdN] 
         * @param {string} [tenantN] 
         * @param {string} [tagN] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasConfigContextsList(id?: string, name?: string, isActive?: string, q?: string, regionId?: string, region?: string, siteId?: string, site?: string, roleId?: string, role?: string, platformId?: string, platform?: string, clusterGroupId?: string, clusterGroup?: string, clusterId?: string, tenantGroupId?: string, tenantGroup?: string, tenantId?: string, tenant?: string, tag?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, regionIdN?: string, regionN?: string, siteIdN?: string, siteN?: string, roleIdN?: string, roleN?: string, platformIdN?: string, platformN?: string, clusterGroupIdN?: string, clusterGroupN?: string, clusterIdN?: string, tenantGroupIdN?: string, tenantGroupN?: string, tenantIdN?: string, tenantN?: string, tagN?: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse20037> {
            return localVarFp.extrasConfigContextsList(id, name, isActive, q, regionId, region, siteId, site, roleId, role, platformId, platform, clusterGroupId, clusterGroup, clusterId, tenantGroupId, tenantGroup, tenantId, tenant, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, regionIdN, regionN, siteIdN, siteN, roleIdN, roleN, platformIdN, platformN, clusterGroupIdN, clusterGroupN, clusterIdN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, tagN, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this config context.
         * @param {WritableConfigContext} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasConfigContextsPartialUpdate(id: number, data: WritableConfigContext, options?: any): AxiosPromise<ConfigContext> {
            return localVarFp.extrasConfigContextsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this config context.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasConfigContextsRead(id: number, options?: any): AxiosPromise<ConfigContext> {
            return localVarFp.extrasConfigContextsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this config context.
         * @param {WritableConfigContext} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasConfigContextsUpdate(id: number, data: WritableConfigContext, options?: any): AxiosPromise<ConfigContext> {
            return localVarFp.extrasConfigContextsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
         * @param {number} [id] 
         * @param {string} [appLabel] 
         * @param {string} [model] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasContentTypesList(id?: number, appLabel?: string, model?: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse20038> {
            return localVarFp.extrasContentTypesList(id, appLabel, model, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
         * @param {number} id A unique integer value identifying this content type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasContentTypesRead(id: number, options?: any): AxiosPromise<ContentType> {
            return localVarFp.extrasContentTypesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasCustomFieldsBulkDelete(options?: any): AxiosPromise<void> {
            return localVarFp.extrasCustomFieldsBulkDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WritableCustomField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasCustomFieldsBulkPartialUpdate(data: WritableCustomField, options?: any): AxiosPromise<CustomField> {
            return localVarFp.extrasCustomFieldsBulkPartialUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WritableCustomField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasCustomFieldsBulkUpdate(data: WritableCustomField, options?: any): AxiosPromise<CustomField> {
            return localVarFp.extrasCustomFieldsBulkUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WritableCustomField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasCustomFieldsCreate(data: WritableCustomField, options?: any): AxiosPromise<CustomField> {
            return localVarFp.extrasCustomFieldsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this custom field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasCustomFieldsDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.extrasCustomFieldsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [contentTypes] 
         * @param {string} [name] 
         * @param {string} [required] 
         * @param {string} [filterLogic] 
         * @param {number} [weight] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasCustomFieldsList(id?: number, contentTypes?: string, name?: string, required?: string, filterLogic?: string, weight?: number, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse20039> {
            return localVarFp.extrasCustomFieldsList(id, contentTypes, name, required, filterLogic, weight, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this custom field.
         * @param {WritableCustomField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasCustomFieldsPartialUpdate(id: number, data: WritableCustomField, options?: any): AxiosPromise<CustomField> {
            return localVarFp.extrasCustomFieldsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this custom field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasCustomFieldsRead(id: number, options?: any): AxiosPromise<CustomField> {
            return localVarFp.extrasCustomFieldsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this custom field.
         * @param {WritableCustomField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasCustomFieldsUpdate(id: number, data: WritableCustomField, options?: any): AxiosPromise<CustomField> {
            return localVarFp.extrasCustomFieldsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasExportTemplatesBulkDelete(options?: any): AxiosPromise<void> {
            return localVarFp.extrasExportTemplatesBulkDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ExportTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasExportTemplatesBulkPartialUpdate(data: ExportTemplate, options?: any): AxiosPromise<ExportTemplate> {
            return localVarFp.extrasExportTemplatesBulkPartialUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ExportTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasExportTemplatesBulkUpdate(data: ExportTemplate, options?: any): AxiosPromise<ExportTemplate> {
            return localVarFp.extrasExportTemplatesBulkUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ExportTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasExportTemplatesCreate(data: ExportTemplate, options?: any): AxiosPromise<ExportTemplate> {
            return localVarFp.extrasExportTemplatesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this export template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasExportTemplatesDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.extrasExportTemplatesDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [contentType] 
         * @param {string} [name] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [contentTypeN] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasExportTemplatesList(id?: string, contentType?: string, name?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, contentTypeN?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse20040> {
            return localVarFp.extrasExportTemplatesList(id, contentType, name, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this export template.
         * @param {ExportTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasExportTemplatesPartialUpdate(id: number, data: ExportTemplate, options?: any): AxiosPromise<ExportTemplate> {
            return localVarFp.extrasExportTemplatesPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this export template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasExportTemplatesRead(id: number, options?: any): AxiosPromise<ExportTemplate> {
            return localVarFp.extrasExportTemplatesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this export template.
         * @param {ExportTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasExportTemplatesUpdate(id: number, data: ExportTemplate, options?: any): AxiosPromise<ExportTemplate> {
            return localVarFp.extrasExportTemplatesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasImageAttachmentsBulkDelete(options?: any): AxiosPromise<void> {
            return localVarFp.extrasImageAttachmentsBulkDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImageAttachment} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasImageAttachmentsBulkPartialUpdate(data: ImageAttachment, options?: any): AxiosPromise<ImageAttachment> {
            return localVarFp.extrasImageAttachmentsBulkPartialUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImageAttachment} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasImageAttachmentsBulkUpdate(data: ImageAttachment, options?: any): AxiosPromise<ImageAttachment> {
            return localVarFp.extrasImageAttachmentsBulkUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImageAttachment} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasImageAttachmentsCreate(data: ImageAttachment, options?: any): AxiosPromise<ImageAttachment> {
            return localVarFp.extrasImageAttachmentsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image attachment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasImageAttachmentsDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.extrasImageAttachmentsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [contentTypeId] 
         * @param {string} [objectId] 
         * @param {string} [name] 
         * @param {string} [contentType] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [contentTypeIdN] 
         * @param {string} [objectIdN] 
         * @param {string} [objectIdLte] 
         * @param {string} [objectIdLt] 
         * @param {string} [objectIdGte] 
         * @param {string} [objectIdGt] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {string} [contentTypeN] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasImageAttachmentsList(id?: string, contentTypeId?: string, objectId?: string, name?: string, contentType?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, contentTypeIdN?: string, objectIdN?: string, objectIdLte?: string, objectIdLt?: string, objectIdGte?: string, objectIdGt?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, contentTypeN?: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse20041> {
            return localVarFp.extrasImageAttachmentsList(id, contentTypeId, objectId, name, contentType, idN, idLte, idLt, idGte, idGt, contentTypeIdN, objectIdN, objectIdLte, objectIdLt, objectIdGte, objectIdGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, contentTypeN, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image attachment.
         * @param {ImageAttachment} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasImageAttachmentsPartialUpdate(id: number, data: ImageAttachment, options?: any): AxiosPromise<ImageAttachment> {
            return localVarFp.extrasImageAttachmentsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image attachment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasImageAttachmentsRead(id: number, options?: any): AxiosPromise<ImageAttachment> {
            return localVarFp.extrasImageAttachmentsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image attachment.
         * @param {ImageAttachment} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasImageAttachmentsUpdate(id: number, data: ImageAttachment, options?: any): AxiosPromise<ImageAttachment> {
            return localVarFp.extrasImageAttachmentsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of job results
         * @param {string} [id] 
         * @param {string} [created] 
         * @param {string} [completed] 
         * @param {string} [status] 
         * @param {string} [user] 
         * @param {string} [objType] 
         * @param {string} [name] 
         * @param {string} [q] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [statusN] 
         * @param {string} [userN] 
         * @param {string} [objTypeN] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasJobResultsList(id?: string, created?: string, completed?: string, status?: string, user?: string, objType?: string, name?: string, q?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, statusN?: string, userN?: string, objTypeN?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse20042> {
            return localVarFp.extrasJobResultsList(id, created, completed, status, user, objType, name, q, idN, idLte, idLt, idGte, idGt, statusN, userN, objTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of job results
         * @param {number} id A unique integer value identifying this job result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasJobResultsRead(id: number, options?: any): AxiosPromise<JobResult> {
            return localVarFp.extrasJobResultsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of recent changes.
         * @param {string} [id] 
         * @param {string} [user] 
         * @param {string} [userName] 
         * @param {string} [requestId] 
         * @param {string} [action] 
         * @param {string} [changedObjectTypeId] 
         * @param {string} [changedObjectId] 
         * @param {string} [objectRepr] 
         * @param {string} [q] 
         * @param {string} [time] 
         * @param {string} [changedObjectType] 
         * @param {string} [userId] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [userN] 
         * @param {string} [userNameN] 
         * @param {string} [userNameIc] 
         * @param {string} [userNameNic] 
         * @param {string} [userNameIew] 
         * @param {string} [userNameNiew] 
         * @param {string} [userNameIsw] 
         * @param {string} [userNameNisw] 
         * @param {string} [userNameIe] 
         * @param {string} [userNameNie] 
         * @param {string} [actionN] 
         * @param {string} [changedObjectTypeIdN] 
         * @param {string} [changedObjectIdN] 
         * @param {string} [changedObjectIdLte] 
         * @param {string} [changedObjectIdLt] 
         * @param {string} [changedObjectIdGte] 
         * @param {string} [changedObjectIdGt] 
         * @param {string} [objectReprN] 
         * @param {string} [objectReprIc] 
         * @param {string} [objectReprNic] 
         * @param {string} [objectReprIew] 
         * @param {string} [objectReprNiew] 
         * @param {string} [objectReprIsw] 
         * @param {string} [objectReprNisw] 
         * @param {string} [objectReprIe] 
         * @param {string} [objectReprNie] 
         * @param {string} [changedObjectTypeN] 
         * @param {string} [userIdN] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasObjectChangesList(id?: string, user?: string, userName?: string, requestId?: string, action?: string, changedObjectTypeId?: string, changedObjectId?: string, objectRepr?: string, q?: string, time?: string, changedObjectType?: string, userId?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, userN?: string, userNameN?: string, userNameIc?: string, userNameNic?: string, userNameIew?: string, userNameNiew?: string, userNameIsw?: string, userNameNisw?: string, userNameIe?: string, userNameNie?: string, actionN?: string, changedObjectTypeIdN?: string, changedObjectIdN?: string, changedObjectIdLte?: string, changedObjectIdLt?: string, changedObjectIdGte?: string, changedObjectIdGt?: string, objectReprN?: string, objectReprIc?: string, objectReprNic?: string, objectReprIew?: string, objectReprNiew?: string, objectReprIsw?: string, objectReprNisw?: string, objectReprIe?: string, objectReprNie?: string, changedObjectTypeN?: string, userIdN?: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse20043> {
            return localVarFp.extrasObjectChangesList(id, user, userName, requestId, action, changedObjectTypeId, changedObjectId, objectRepr, q, time, changedObjectType, userId, idN, idLte, idLt, idGte, idGt, userN, userNameN, userNameIc, userNameNic, userNameIew, userNameNiew, userNameIsw, userNameNisw, userNameIe, userNameNie, actionN, changedObjectTypeIdN, changedObjectIdN, changedObjectIdLte, changedObjectIdLt, changedObjectIdGte, changedObjectIdGt, objectReprN, objectReprIc, objectReprNic, objectReprIew, objectReprNiew, objectReprIsw, objectReprNisw, objectReprIe, objectReprNie, changedObjectTypeN, userIdN, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of recent changes.
         * @param {number} id A unique integer value identifying this object change.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasObjectChangesRead(id: number, options?: any): AxiosPromise<ObjectChange> {
            return localVarFp.extrasObjectChangesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Compile all reports and their related results (if any). Result data is deferred in the list view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasReportsList(options?: any): AxiosPromise<void> {
            return localVarFp.extrasReportsList(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single Report identified as \"<module>.<report>\".
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasReportsRead(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.extrasReportsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Run a Report identified as \"<module>.<script>\" and return the pending JobResult as the result
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasReportsRun(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.extrasReportsRun(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasScriptsList(options?: any): AxiosPromise<void> {
            return localVarFp.extrasScriptsList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasScriptsRead(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.extrasScriptsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasTagsBulkDelete(options?: any): AxiosPromise<void> {
            return localVarFp.extrasTagsBulkDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasTagsBulkPartialUpdate(data: Tag, options?: any): AxiosPromise<Tag> {
            return localVarFp.extrasTagsBulkPartialUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasTagsBulkUpdate(data: Tag, options?: any): AxiosPromise<Tag> {
            return localVarFp.extrasTagsBulkUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasTagsCreate(data: Tag, options?: any): AxiosPromise<Tag> {
            return localVarFp.extrasTagsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasTagsDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.extrasTagsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [slug] 
         * @param {string} [color] 
         * @param {string} [q] 
         * @param {string} [idN] 
         * @param {string} [idLte] 
         * @param {string} [idLt] 
         * @param {string} [idGte] 
         * @param {string} [idGt] 
         * @param {string} [nameN] 
         * @param {string} [nameIc] 
         * @param {string} [nameNic] 
         * @param {string} [nameIew] 
         * @param {string} [nameNiew] 
         * @param {string} [nameIsw] 
         * @param {string} [nameNisw] 
         * @param {string} [nameIe] 
         * @param {string} [nameNie] 
         * @param {string} [slugN] 
         * @param {string} [slugIc] 
         * @param {string} [slugNic] 
         * @param {string} [slugIew] 
         * @param {string} [slugNiew] 
         * @param {string} [slugIsw] 
         * @param {string} [slugNisw] 
         * @param {string} [slugIe] 
         * @param {string} [slugNie] 
         * @param {string} [colorN] 
         * @param {string} [colorIc] 
         * @param {string} [colorNic] 
         * @param {string} [colorIew] 
         * @param {string} [colorNiew] 
         * @param {string} [colorIsw] 
         * @param {string} [colorNisw] 
         * @param {string} [colorIe] 
         * @param {string} [colorNie] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasTagsList(id?: string, name?: string, slug?: string, color?: string, q?: string, idN?: string, idLte?: string, idLt?: string, idGte?: string, idGt?: string, nameN?: string, nameIc?: string, nameNic?: string, nameIew?: string, nameNiew?: string, nameIsw?: string, nameNisw?: string, nameIe?: string, nameNie?: string, slugN?: string, slugIc?: string, slugNic?: string, slugIew?: string, slugNiew?: string, slugIsw?: string, slugNisw?: string, slugIe?: string, slugNie?: string, colorN?: string, colorIc?: string, colorNic?: string, colorIew?: string, colorNiew?: string, colorIsw?: string, colorNisw?: string, colorIe?: string, colorNie?: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse20044> {
            return localVarFp.extrasTagsList(id, name, slug, color, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tag.
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasTagsPartialUpdate(id: number, data: Tag, options?: any): AxiosPromise<Tag> {
            return localVarFp.extrasTagsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasTagsRead(id: number, options?: any): AxiosPromise<Tag> {
            return localVarFp.extrasTagsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this tag.
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasTagsUpdate(id: number, data: Tag, options?: any): AxiosPromise<Tag> {
            return localVarFp.extrasTagsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for extrasConfigContextsBulkPartialUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasConfigContextsBulkPartialUpdateRequest
 */
export interface ExtrasApiExtrasConfigContextsBulkPartialUpdateRequest {
    /**
     * 
     * @type {WritableConfigContext}
     * @memberof ExtrasApiExtrasConfigContextsBulkPartialUpdate
     */
    readonly data: WritableConfigContext
}

/**
 * Request parameters for extrasConfigContextsBulkUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasConfigContextsBulkUpdateRequest
 */
export interface ExtrasApiExtrasConfigContextsBulkUpdateRequest {
    /**
     * 
     * @type {WritableConfigContext}
     * @memberof ExtrasApiExtrasConfigContextsBulkUpdate
     */
    readonly data: WritableConfigContext
}

/**
 * Request parameters for extrasConfigContextsCreate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasConfigContextsCreateRequest
 */
export interface ExtrasApiExtrasConfigContextsCreateRequest {
    /**
     * 
     * @type {WritableConfigContext}
     * @memberof ExtrasApiExtrasConfigContextsCreate
     */
    readonly data: WritableConfigContext
}

/**
 * Request parameters for extrasConfigContextsDelete operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasConfigContextsDeleteRequest
 */
export interface ExtrasApiExtrasConfigContextsDeleteRequest {
    /**
     * A unique integer value identifying this config context.
     * @type {number}
     * @memberof ExtrasApiExtrasConfigContextsDelete
     */
    readonly id: number
}

/**
 * Request parameters for extrasConfigContextsList operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasConfigContextsListRequest
 */
export interface ExtrasApiExtrasConfigContextsListRequest {
    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly id?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly isActive?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly q?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly regionId?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly region?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly siteId?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly site?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly roleId?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly role?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly platformId?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly platform?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly clusterGroupId?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly clusterGroup?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly clusterId?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly tenantGroupId?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly tenantGroup?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly tenantId?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly tenant?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly tag?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly idN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly idLte?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly idLt?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly idGte?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly idGt?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly nameN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly nameIc?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly nameNic?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly nameIew?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly nameNiew?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly nameIsw?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly nameNisw?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly nameIe?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly nameNie?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly regionIdN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly regionN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly siteIdN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly siteN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly roleIdN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly roleN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly platformIdN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly platformN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly clusterGroupIdN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly clusterGroupN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly clusterIdN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly tenantGroupIdN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly tenantGroupN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly tenantIdN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly tenantN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly tagN?: string

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof ExtrasApiExtrasConfigContextsList
     */
    readonly offset?: number
}

/**
 * Request parameters for extrasConfigContextsPartialUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasConfigContextsPartialUpdateRequest
 */
export interface ExtrasApiExtrasConfigContextsPartialUpdateRequest {
    /**
     * A unique integer value identifying this config context.
     * @type {number}
     * @memberof ExtrasApiExtrasConfigContextsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {WritableConfigContext}
     * @memberof ExtrasApiExtrasConfigContextsPartialUpdate
     */
    readonly data: WritableConfigContext
}

/**
 * Request parameters for extrasConfigContextsRead operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasConfigContextsReadRequest
 */
export interface ExtrasApiExtrasConfigContextsReadRequest {
    /**
     * A unique integer value identifying this config context.
     * @type {number}
     * @memberof ExtrasApiExtrasConfigContextsRead
     */
    readonly id: number
}

/**
 * Request parameters for extrasConfigContextsUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasConfigContextsUpdateRequest
 */
export interface ExtrasApiExtrasConfigContextsUpdateRequest {
    /**
     * A unique integer value identifying this config context.
     * @type {number}
     * @memberof ExtrasApiExtrasConfigContextsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {WritableConfigContext}
     * @memberof ExtrasApiExtrasConfigContextsUpdate
     */
    readonly data: WritableConfigContext
}

/**
 * Request parameters for extrasContentTypesList operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasContentTypesListRequest
 */
export interface ExtrasApiExtrasContentTypesListRequest {
    /**
     * 
     * @type {number}
     * @memberof ExtrasApiExtrasContentTypesList
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasContentTypesList
     */
    readonly appLabel?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasContentTypesList
     */
    readonly model?: string

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ExtrasApiExtrasContentTypesList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof ExtrasApiExtrasContentTypesList
     */
    readonly offset?: number
}

/**
 * Request parameters for extrasContentTypesRead operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasContentTypesReadRequest
 */
export interface ExtrasApiExtrasContentTypesReadRequest {
    /**
     * A unique integer value identifying this content type.
     * @type {number}
     * @memberof ExtrasApiExtrasContentTypesRead
     */
    readonly id: number
}

/**
 * Request parameters for extrasCustomFieldsBulkPartialUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasCustomFieldsBulkPartialUpdateRequest
 */
export interface ExtrasApiExtrasCustomFieldsBulkPartialUpdateRequest {
    /**
     * 
     * @type {WritableCustomField}
     * @memberof ExtrasApiExtrasCustomFieldsBulkPartialUpdate
     */
    readonly data: WritableCustomField
}

/**
 * Request parameters for extrasCustomFieldsBulkUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasCustomFieldsBulkUpdateRequest
 */
export interface ExtrasApiExtrasCustomFieldsBulkUpdateRequest {
    /**
     * 
     * @type {WritableCustomField}
     * @memberof ExtrasApiExtrasCustomFieldsBulkUpdate
     */
    readonly data: WritableCustomField
}

/**
 * Request parameters for extrasCustomFieldsCreate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasCustomFieldsCreateRequest
 */
export interface ExtrasApiExtrasCustomFieldsCreateRequest {
    /**
     * 
     * @type {WritableCustomField}
     * @memberof ExtrasApiExtrasCustomFieldsCreate
     */
    readonly data: WritableCustomField
}

/**
 * Request parameters for extrasCustomFieldsDelete operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasCustomFieldsDeleteRequest
 */
export interface ExtrasApiExtrasCustomFieldsDeleteRequest {
    /**
     * A unique integer value identifying this custom field.
     * @type {number}
     * @memberof ExtrasApiExtrasCustomFieldsDelete
     */
    readonly id: number
}

/**
 * Request parameters for extrasCustomFieldsList operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasCustomFieldsListRequest
 */
export interface ExtrasApiExtrasCustomFieldsListRequest {
    /**
     * 
     * @type {number}
     * @memberof ExtrasApiExtrasCustomFieldsList
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasCustomFieldsList
     */
    readonly contentTypes?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasCustomFieldsList
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasCustomFieldsList
     */
    readonly required?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasCustomFieldsList
     */
    readonly filterLogic?: string

    /**
     * 
     * @type {number}
     * @memberof ExtrasApiExtrasCustomFieldsList
     */
    readonly weight?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ExtrasApiExtrasCustomFieldsList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof ExtrasApiExtrasCustomFieldsList
     */
    readonly offset?: number
}

/**
 * Request parameters for extrasCustomFieldsPartialUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasCustomFieldsPartialUpdateRequest
 */
export interface ExtrasApiExtrasCustomFieldsPartialUpdateRequest {
    /**
     * A unique integer value identifying this custom field.
     * @type {number}
     * @memberof ExtrasApiExtrasCustomFieldsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {WritableCustomField}
     * @memberof ExtrasApiExtrasCustomFieldsPartialUpdate
     */
    readonly data: WritableCustomField
}

/**
 * Request parameters for extrasCustomFieldsRead operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasCustomFieldsReadRequest
 */
export interface ExtrasApiExtrasCustomFieldsReadRequest {
    /**
     * A unique integer value identifying this custom field.
     * @type {number}
     * @memberof ExtrasApiExtrasCustomFieldsRead
     */
    readonly id: number
}

/**
 * Request parameters for extrasCustomFieldsUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasCustomFieldsUpdateRequest
 */
export interface ExtrasApiExtrasCustomFieldsUpdateRequest {
    /**
     * A unique integer value identifying this custom field.
     * @type {number}
     * @memberof ExtrasApiExtrasCustomFieldsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {WritableCustomField}
     * @memberof ExtrasApiExtrasCustomFieldsUpdate
     */
    readonly data: WritableCustomField
}

/**
 * Request parameters for extrasExportTemplatesBulkPartialUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasExportTemplatesBulkPartialUpdateRequest
 */
export interface ExtrasApiExtrasExportTemplatesBulkPartialUpdateRequest {
    /**
     * 
     * @type {ExportTemplate}
     * @memberof ExtrasApiExtrasExportTemplatesBulkPartialUpdate
     */
    readonly data: ExportTemplate
}

/**
 * Request parameters for extrasExportTemplatesBulkUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasExportTemplatesBulkUpdateRequest
 */
export interface ExtrasApiExtrasExportTemplatesBulkUpdateRequest {
    /**
     * 
     * @type {ExportTemplate}
     * @memberof ExtrasApiExtrasExportTemplatesBulkUpdate
     */
    readonly data: ExportTemplate
}

/**
 * Request parameters for extrasExportTemplatesCreate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasExportTemplatesCreateRequest
 */
export interface ExtrasApiExtrasExportTemplatesCreateRequest {
    /**
     * 
     * @type {ExportTemplate}
     * @memberof ExtrasApiExtrasExportTemplatesCreate
     */
    readonly data: ExportTemplate
}

/**
 * Request parameters for extrasExportTemplatesDelete operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasExportTemplatesDeleteRequest
 */
export interface ExtrasApiExtrasExportTemplatesDeleteRequest {
    /**
     * A unique integer value identifying this export template.
     * @type {number}
     * @memberof ExtrasApiExtrasExportTemplatesDelete
     */
    readonly id: number
}

/**
 * Request parameters for extrasExportTemplatesList operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasExportTemplatesListRequest
 */
export interface ExtrasApiExtrasExportTemplatesListRequest {
    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly id?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly contentType?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly idN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly idLte?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly idLt?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly idGte?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly idGt?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly contentTypeN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly nameN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly nameIc?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly nameNic?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly nameIew?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly nameNiew?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly nameIsw?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly nameNisw?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly nameIe?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly nameNie?: string

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof ExtrasApiExtrasExportTemplatesList
     */
    readonly offset?: number
}

/**
 * Request parameters for extrasExportTemplatesPartialUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasExportTemplatesPartialUpdateRequest
 */
export interface ExtrasApiExtrasExportTemplatesPartialUpdateRequest {
    /**
     * A unique integer value identifying this export template.
     * @type {number}
     * @memberof ExtrasApiExtrasExportTemplatesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ExportTemplate}
     * @memberof ExtrasApiExtrasExportTemplatesPartialUpdate
     */
    readonly data: ExportTemplate
}

/**
 * Request parameters for extrasExportTemplatesRead operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasExportTemplatesReadRequest
 */
export interface ExtrasApiExtrasExportTemplatesReadRequest {
    /**
     * A unique integer value identifying this export template.
     * @type {number}
     * @memberof ExtrasApiExtrasExportTemplatesRead
     */
    readonly id: number
}

/**
 * Request parameters for extrasExportTemplatesUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasExportTemplatesUpdateRequest
 */
export interface ExtrasApiExtrasExportTemplatesUpdateRequest {
    /**
     * A unique integer value identifying this export template.
     * @type {number}
     * @memberof ExtrasApiExtrasExportTemplatesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ExportTemplate}
     * @memberof ExtrasApiExtrasExportTemplatesUpdate
     */
    readonly data: ExportTemplate
}

/**
 * Request parameters for extrasImageAttachmentsBulkPartialUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasImageAttachmentsBulkPartialUpdateRequest
 */
export interface ExtrasApiExtrasImageAttachmentsBulkPartialUpdateRequest {
    /**
     * 
     * @type {ImageAttachment}
     * @memberof ExtrasApiExtrasImageAttachmentsBulkPartialUpdate
     */
    readonly data: ImageAttachment
}

/**
 * Request parameters for extrasImageAttachmentsBulkUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasImageAttachmentsBulkUpdateRequest
 */
export interface ExtrasApiExtrasImageAttachmentsBulkUpdateRequest {
    /**
     * 
     * @type {ImageAttachment}
     * @memberof ExtrasApiExtrasImageAttachmentsBulkUpdate
     */
    readonly data: ImageAttachment
}

/**
 * Request parameters for extrasImageAttachmentsCreate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasImageAttachmentsCreateRequest
 */
export interface ExtrasApiExtrasImageAttachmentsCreateRequest {
    /**
     * 
     * @type {ImageAttachment}
     * @memberof ExtrasApiExtrasImageAttachmentsCreate
     */
    readonly data: ImageAttachment
}

/**
 * Request parameters for extrasImageAttachmentsDelete operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasImageAttachmentsDeleteRequest
 */
export interface ExtrasApiExtrasImageAttachmentsDeleteRequest {
    /**
     * A unique integer value identifying this image attachment.
     * @type {number}
     * @memberof ExtrasApiExtrasImageAttachmentsDelete
     */
    readonly id: number
}

/**
 * Request parameters for extrasImageAttachmentsList operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasImageAttachmentsListRequest
 */
export interface ExtrasApiExtrasImageAttachmentsListRequest {
    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly id?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly contentTypeId?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly objectId?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly contentType?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly idN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly idLte?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly idLt?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly idGte?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly idGt?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly contentTypeIdN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly objectIdN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly objectIdLte?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly objectIdLt?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly objectIdGte?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly objectIdGt?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly nameN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly nameIc?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly nameNic?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly nameIew?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly nameNiew?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly nameIsw?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly nameNisw?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly nameIe?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly nameNie?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly contentTypeN?: string

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof ExtrasApiExtrasImageAttachmentsList
     */
    readonly offset?: number
}

/**
 * Request parameters for extrasImageAttachmentsPartialUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasImageAttachmentsPartialUpdateRequest
 */
export interface ExtrasApiExtrasImageAttachmentsPartialUpdateRequest {
    /**
     * A unique integer value identifying this image attachment.
     * @type {number}
     * @memberof ExtrasApiExtrasImageAttachmentsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ImageAttachment}
     * @memberof ExtrasApiExtrasImageAttachmentsPartialUpdate
     */
    readonly data: ImageAttachment
}

/**
 * Request parameters for extrasImageAttachmentsRead operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasImageAttachmentsReadRequest
 */
export interface ExtrasApiExtrasImageAttachmentsReadRequest {
    /**
     * A unique integer value identifying this image attachment.
     * @type {number}
     * @memberof ExtrasApiExtrasImageAttachmentsRead
     */
    readonly id: number
}

/**
 * Request parameters for extrasImageAttachmentsUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasImageAttachmentsUpdateRequest
 */
export interface ExtrasApiExtrasImageAttachmentsUpdateRequest {
    /**
     * A unique integer value identifying this image attachment.
     * @type {number}
     * @memberof ExtrasApiExtrasImageAttachmentsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ImageAttachment}
     * @memberof ExtrasApiExtrasImageAttachmentsUpdate
     */
    readonly data: ImageAttachment
}

/**
 * Request parameters for extrasJobResultsList operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasJobResultsListRequest
 */
export interface ExtrasApiExtrasJobResultsListRequest {
    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly id?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly created?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly completed?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly status?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly user?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly objType?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly q?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly idN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly idLte?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly idLt?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly idGte?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly idGt?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly statusN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly userN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly objTypeN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly nameN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly nameIc?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly nameNic?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly nameIew?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly nameNiew?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly nameIsw?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly nameNisw?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly nameIe?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly nameNie?: string

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof ExtrasApiExtrasJobResultsList
     */
    readonly offset?: number
}

/**
 * Request parameters for extrasJobResultsRead operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasJobResultsReadRequest
 */
export interface ExtrasApiExtrasJobResultsReadRequest {
    /**
     * A unique integer value identifying this job result.
     * @type {number}
     * @memberof ExtrasApiExtrasJobResultsRead
     */
    readonly id: number
}

/**
 * Request parameters for extrasObjectChangesList operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasObjectChangesListRequest
 */
export interface ExtrasApiExtrasObjectChangesListRequest {
    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly id?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly user?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly userName?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly requestId?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly action?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly changedObjectTypeId?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly changedObjectId?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly objectRepr?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly q?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly time?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly changedObjectType?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly userId?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly idN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly idLte?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly idLt?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly idGte?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly idGt?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly userN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly userNameN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly userNameIc?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly userNameNic?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly userNameIew?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly userNameNiew?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly userNameIsw?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly userNameNisw?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly userNameIe?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly userNameNie?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly actionN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly changedObjectTypeIdN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly changedObjectIdN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly changedObjectIdLte?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly changedObjectIdLt?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly changedObjectIdGte?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly changedObjectIdGt?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly objectReprN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly objectReprIc?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly objectReprNic?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly objectReprIew?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly objectReprNiew?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly objectReprIsw?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly objectReprNisw?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly objectReprIe?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly objectReprNie?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly changedObjectTypeN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly userIdN?: string

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof ExtrasApiExtrasObjectChangesList
     */
    readonly offset?: number
}

/**
 * Request parameters for extrasObjectChangesRead operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasObjectChangesReadRequest
 */
export interface ExtrasApiExtrasObjectChangesReadRequest {
    /**
     * A unique integer value identifying this object change.
     * @type {number}
     * @memberof ExtrasApiExtrasObjectChangesRead
     */
    readonly id: number
}

/**
 * Request parameters for extrasReportsRead operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasReportsReadRequest
 */
export interface ExtrasApiExtrasReportsReadRequest {
    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasReportsRead
     */
    readonly id: string
}

/**
 * Request parameters for extrasReportsRun operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasReportsRunRequest
 */
export interface ExtrasApiExtrasReportsRunRequest {
    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasReportsRun
     */
    readonly id: string
}

/**
 * Request parameters for extrasScriptsRead operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasScriptsReadRequest
 */
export interface ExtrasApiExtrasScriptsReadRequest {
    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasScriptsRead
     */
    readonly id: string
}

/**
 * Request parameters for extrasTagsBulkPartialUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasTagsBulkPartialUpdateRequest
 */
export interface ExtrasApiExtrasTagsBulkPartialUpdateRequest {
    /**
     * 
     * @type {Tag}
     * @memberof ExtrasApiExtrasTagsBulkPartialUpdate
     */
    readonly data: Tag
}

/**
 * Request parameters for extrasTagsBulkUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasTagsBulkUpdateRequest
 */
export interface ExtrasApiExtrasTagsBulkUpdateRequest {
    /**
     * 
     * @type {Tag}
     * @memberof ExtrasApiExtrasTagsBulkUpdate
     */
    readonly data: Tag
}

/**
 * Request parameters for extrasTagsCreate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasTagsCreateRequest
 */
export interface ExtrasApiExtrasTagsCreateRequest {
    /**
     * 
     * @type {Tag}
     * @memberof ExtrasApiExtrasTagsCreate
     */
    readonly data: Tag
}

/**
 * Request parameters for extrasTagsDelete operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasTagsDeleteRequest
 */
export interface ExtrasApiExtrasTagsDeleteRequest {
    /**
     * A unique integer value identifying this tag.
     * @type {number}
     * @memberof ExtrasApiExtrasTagsDelete
     */
    readonly id: number
}

/**
 * Request parameters for extrasTagsList operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasTagsListRequest
 */
export interface ExtrasApiExtrasTagsListRequest {
    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly id?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly slug?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly color?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly q?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly idN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly idLte?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly idLt?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly idGte?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly idGt?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly nameN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly nameIc?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly nameNic?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly nameIew?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly nameNiew?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly nameIsw?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly nameNisw?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly nameIe?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly nameNie?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly slugN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly slugIc?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly slugNic?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly slugIew?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly slugNiew?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly slugIsw?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly slugNisw?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly slugIe?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly slugNie?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly colorN?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly colorIc?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly colorNic?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly colorIew?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly colorNiew?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly colorIsw?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly colorNisw?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly colorIe?: string

    /**
     * 
     * @type {string}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly colorNie?: string

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly limit?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof ExtrasApiExtrasTagsList
     */
    readonly offset?: number
}

/**
 * Request parameters for extrasTagsPartialUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasTagsPartialUpdateRequest
 */
export interface ExtrasApiExtrasTagsPartialUpdateRequest {
    /**
     * A unique integer value identifying this tag.
     * @type {number}
     * @memberof ExtrasApiExtrasTagsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Tag}
     * @memberof ExtrasApiExtrasTagsPartialUpdate
     */
    readonly data: Tag
}

/**
 * Request parameters for extrasTagsRead operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasTagsReadRequest
 */
export interface ExtrasApiExtrasTagsReadRequest {
    /**
     * A unique integer value identifying this tag.
     * @type {number}
     * @memberof ExtrasApiExtrasTagsRead
     */
    readonly id: number
}

/**
 * Request parameters for extrasTagsUpdate operation in ExtrasApi.
 * @export
 * @interface ExtrasApiExtrasTagsUpdateRequest
 */
export interface ExtrasApiExtrasTagsUpdateRequest {
    /**
     * A unique integer value identifying this tag.
     * @type {number}
     * @memberof ExtrasApiExtrasTagsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Tag}
     * @memberof ExtrasApiExtrasTagsUpdate
     */
    readonly data: Tag
}

/**
 * ExtrasApi - object-oriented interface
 * @export
 * @class ExtrasApi
 * @extends {BaseAPI}
 */
export class ExtrasApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasConfigContextsBulkDelete(options?: any) {
        return ExtrasApiFp(this.configuration).extrasConfigContextsBulkDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasConfigContextsBulkPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasConfigContextsBulkPartialUpdate(requestParameters: ExtrasApiExtrasConfigContextsBulkPartialUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasConfigContextsBulkPartialUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasConfigContextsBulkUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasConfigContextsBulkUpdate(requestParameters: ExtrasApiExtrasConfigContextsBulkUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasConfigContextsBulkUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasConfigContextsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasConfigContextsCreate(requestParameters: ExtrasApiExtrasConfigContextsCreateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasConfigContextsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasConfigContextsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasConfigContextsDelete(requestParameters: ExtrasApiExtrasConfigContextsDeleteRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasConfigContextsDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasConfigContextsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasConfigContextsList(requestParameters: ExtrasApiExtrasConfigContextsListRequest = {}, options?: any) {
        return ExtrasApiFp(this.configuration).extrasConfigContextsList(requestParameters.id, requestParameters.name, requestParameters.isActive, requestParameters.q, requestParameters.regionId, requestParameters.region, requestParameters.siteId, requestParameters.site, requestParameters.roleId, requestParameters.role, requestParameters.platformId, requestParameters.platform, requestParameters.clusterGroupId, requestParameters.clusterGroup, requestParameters.clusterId, requestParameters.tenantGroupId, requestParameters.tenantGroup, requestParameters.tenantId, requestParameters.tenant, requestParameters.tag, requestParameters.idN, requestParameters.idLte, requestParameters.idLt, requestParameters.idGte, requestParameters.idGt, requestParameters.nameN, requestParameters.nameIc, requestParameters.nameNic, requestParameters.nameIew, requestParameters.nameNiew, requestParameters.nameIsw, requestParameters.nameNisw, requestParameters.nameIe, requestParameters.nameNie, requestParameters.regionIdN, requestParameters.regionN, requestParameters.siteIdN, requestParameters.siteN, requestParameters.roleIdN, requestParameters.roleN, requestParameters.platformIdN, requestParameters.platformN, requestParameters.clusterGroupIdN, requestParameters.clusterGroupN, requestParameters.clusterIdN, requestParameters.tenantGroupIdN, requestParameters.tenantGroupN, requestParameters.tenantIdN, requestParameters.tenantN, requestParameters.tagN, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasConfigContextsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasConfigContextsPartialUpdate(requestParameters: ExtrasApiExtrasConfigContextsPartialUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasConfigContextsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasConfigContextsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasConfigContextsRead(requestParameters: ExtrasApiExtrasConfigContextsReadRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasConfigContextsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasConfigContextsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasConfigContextsUpdate(requestParameters: ExtrasApiExtrasConfigContextsUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasConfigContextsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
     * @param {ExtrasApiExtrasContentTypesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasContentTypesList(requestParameters: ExtrasApiExtrasContentTypesListRequest = {}, options?: any) {
        return ExtrasApiFp(this.configuration).extrasContentTypesList(requestParameters.id, requestParameters.appLabel, requestParameters.model, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
     * @param {ExtrasApiExtrasContentTypesReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasContentTypesRead(requestParameters: ExtrasApiExtrasContentTypesReadRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasContentTypesRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasCustomFieldsBulkDelete(options?: any) {
        return ExtrasApiFp(this.configuration).extrasCustomFieldsBulkDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasCustomFieldsBulkPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasCustomFieldsBulkPartialUpdate(requestParameters: ExtrasApiExtrasCustomFieldsBulkPartialUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasCustomFieldsBulkPartialUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasCustomFieldsBulkUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasCustomFieldsBulkUpdate(requestParameters: ExtrasApiExtrasCustomFieldsBulkUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasCustomFieldsBulkUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasCustomFieldsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasCustomFieldsCreate(requestParameters: ExtrasApiExtrasCustomFieldsCreateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasCustomFieldsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasCustomFieldsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasCustomFieldsDelete(requestParameters: ExtrasApiExtrasCustomFieldsDeleteRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasCustomFieldsDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasCustomFieldsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasCustomFieldsList(requestParameters: ExtrasApiExtrasCustomFieldsListRequest = {}, options?: any) {
        return ExtrasApiFp(this.configuration).extrasCustomFieldsList(requestParameters.id, requestParameters.contentTypes, requestParameters.name, requestParameters.required, requestParameters.filterLogic, requestParameters.weight, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasCustomFieldsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasCustomFieldsPartialUpdate(requestParameters: ExtrasApiExtrasCustomFieldsPartialUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasCustomFieldsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasCustomFieldsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasCustomFieldsRead(requestParameters: ExtrasApiExtrasCustomFieldsReadRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasCustomFieldsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasCustomFieldsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasCustomFieldsUpdate(requestParameters: ExtrasApiExtrasCustomFieldsUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasCustomFieldsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasExportTemplatesBulkDelete(options?: any) {
        return ExtrasApiFp(this.configuration).extrasExportTemplatesBulkDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasExportTemplatesBulkPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasExportTemplatesBulkPartialUpdate(requestParameters: ExtrasApiExtrasExportTemplatesBulkPartialUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasExportTemplatesBulkPartialUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasExportTemplatesBulkUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasExportTemplatesBulkUpdate(requestParameters: ExtrasApiExtrasExportTemplatesBulkUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasExportTemplatesBulkUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasExportTemplatesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasExportTemplatesCreate(requestParameters: ExtrasApiExtrasExportTemplatesCreateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasExportTemplatesCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasExportTemplatesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasExportTemplatesDelete(requestParameters: ExtrasApiExtrasExportTemplatesDeleteRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasExportTemplatesDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasExportTemplatesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasExportTemplatesList(requestParameters: ExtrasApiExtrasExportTemplatesListRequest = {}, options?: any) {
        return ExtrasApiFp(this.configuration).extrasExportTemplatesList(requestParameters.id, requestParameters.contentType, requestParameters.name, requestParameters.idN, requestParameters.idLte, requestParameters.idLt, requestParameters.idGte, requestParameters.idGt, requestParameters.contentTypeN, requestParameters.nameN, requestParameters.nameIc, requestParameters.nameNic, requestParameters.nameIew, requestParameters.nameNiew, requestParameters.nameIsw, requestParameters.nameNisw, requestParameters.nameIe, requestParameters.nameNie, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasExportTemplatesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasExportTemplatesPartialUpdate(requestParameters: ExtrasApiExtrasExportTemplatesPartialUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasExportTemplatesPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasExportTemplatesReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasExportTemplatesRead(requestParameters: ExtrasApiExtrasExportTemplatesReadRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasExportTemplatesRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasExportTemplatesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasExportTemplatesUpdate(requestParameters: ExtrasApiExtrasExportTemplatesUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasExportTemplatesUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasImageAttachmentsBulkDelete(options?: any) {
        return ExtrasApiFp(this.configuration).extrasImageAttachmentsBulkDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasImageAttachmentsBulkPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasImageAttachmentsBulkPartialUpdate(requestParameters: ExtrasApiExtrasImageAttachmentsBulkPartialUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasImageAttachmentsBulkPartialUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasImageAttachmentsBulkUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasImageAttachmentsBulkUpdate(requestParameters: ExtrasApiExtrasImageAttachmentsBulkUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasImageAttachmentsBulkUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasImageAttachmentsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasImageAttachmentsCreate(requestParameters: ExtrasApiExtrasImageAttachmentsCreateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasImageAttachmentsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasImageAttachmentsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasImageAttachmentsDelete(requestParameters: ExtrasApiExtrasImageAttachmentsDeleteRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasImageAttachmentsDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasImageAttachmentsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasImageAttachmentsList(requestParameters: ExtrasApiExtrasImageAttachmentsListRequest = {}, options?: any) {
        return ExtrasApiFp(this.configuration).extrasImageAttachmentsList(requestParameters.id, requestParameters.contentTypeId, requestParameters.objectId, requestParameters.name, requestParameters.contentType, requestParameters.idN, requestParameters.idLte, requestParameters.idLt, requestParameters.idGte, requestParameters.idGt, requestParameters.contentTypeIdN, requestParameters.objectIdN, requestParameters.objectIdLte, requestParameters.objectIdLt, requestParameters.objectIdGte, requestParameters.objectIdGt, requestParameters.nameN, requestParameters.nameIc, requestParameters.nameNic, requestParameters.nameIew, requestParameters.nameNiew, requestParameters.nameIsw, requestParameters.nameNisw, requestParameters.nameIe, requestParameters.nameNie, requestParameters.contentTypeN, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasImageAttachmentsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasImageAttachmentsPartialUpdate(requestParameters: ExtrasApiExtrasImageAttachmentsPartialUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasImageAttachmentsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasImageAttachmentsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasImageAttachmentsRead(requestParameters: ExtrasApiExtrasImageAttachmentsReadRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasImageAttachmentsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasImageAttachmentsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasImageAttachmentsUpdate(requestParameters: ExtrasApiExtrasImageAttachmentsUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasImageAttachmentsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of job results
     * @param {ExtrasApiExtrasJobResultsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasJobResultsList(requestParameters: ExtrasApiExtrasJobResultsListRequest = {}, options?: any) {
        return ExtrasApiFp(this.configuration).extrasJobResultsList(requestParameters.id, requestParameters.created, requestParameters.completed, requestParameters.status, requestParameters.user, requestParameters.objType, requestParameters.name, requestParameters.q, requestParameters.idN, requestParameters.idLte, requestParameters.idLt, requestParameters.idGte, requestParameters.idGt, requestParameters.statusN, requestParameters.userN, requestParameters.objTypeN, requestParameters.nameN, requestParameters.nameIc, requestParameters.nameNic, requestParameters.nameIew, requestParameters.nameNiew, requestParameters.nameIsw, requestParameters.nameNisw, requestParameters.nameIe, requestParameters.nameNie, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of job results
     * @param {ExtrasApiExtrasJobResultsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasJobResultsRead(requestParameters: ExtrasApiExtrasJobResultsReadRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasJobResultsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of recent changes.
     * @param {ExtrasApiExtrasObjectChangesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasObjectChangesList(requestParameters: ExtrasApiExtrasObjectChangesListRequest = {}, options?: any) {
        return ExtrasApiFp(this.configuration).extrasObjectChangesList(requestParameters.id, requestParameters.user, requestParameters.userName, requestParameters.requestId, requestParameters.action, requestParameters.changedObjectTypeId, requestParameters.changedObjectId, requestParameters.objectRepr, requestParameters.q, requestParameters.time, requestParameters.changedObjectType, requestParameters.userId, requestParameters.idN, requestParameters.idLte, requestParameters.idLt, requestParameters.idGte, requestParameters.idGt, requestParameters.userN, requestParameters.userNameN, requestParameters.userNameIc, requestParameters.userNameNic, requestParameters.userNameIew, requestParameters.userNameNiew, requestParameters.userNameIsw, requestParameters.userNameNisw, requestParameters.userNameIe, requestParameters.userNameNie, requestParameters.actionN, requestParameters.changedObjectTypeIdN, requestParameters.changedObjectIdN, requestParameters.changedObjectIdLte, requestParameters.changedObjectIdLt, requestParameters.changedObjectIdGte, requestParameters.changedObjectIdGt, requestParameters.objectReprN, requestParameters.objectReprIc, requestParameters.objectReprNic, requestParameters.objectReprIew, requestParameters.objectReprNiew, requestParameters.objectReprIsw, requestParameters.objectReprNisw, requestParameters.objectReprIe, requestParameters.objectReprNie, requestParameters.changedObjectTypeN, requestParameters.userIdN, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of recent changes.
     * @param {ExtrasApiExtrasObjectChangesReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasObjectChangesRead(requestParameters: ExtrasApiExtrasObjectChangesReadRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasObjectChangesRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Compile all reports and their related results (if any). Result data is deferred in the list view.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasReportsList(options?: any) {
        return ExtrasApiFp(this.configuration).extrasReportsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a single Report identified as \"<module>.<report>\".
     * @param {ExtrasApiExtrasReportsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasReportsRead(requestParameters: ExtrasApiExtrasReportsReadRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasReportsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Run a Report identified as \"<module>.<script>\" and return the pending JobResult as the result
     * @param {ExtrasApiExtrasReportsRunRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasReportsRun(requestParameters: ExtrasApiExtrasReportsRunRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasReportsRun(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasScriptsList(options?: any) {
        return ExtrasApiFp(this.configuration).extrasScriptsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasScriptsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasScriptsRead(requestParameters: ExtrasApiExtrasScriptsReadRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasScriptsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasTagsBulkDelete(options?: any) {
        return ExtrasApiFp(this.configuration).extrasTagsBulkDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasTagsBulkPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasTagsBulkPartialUpdate(requestParameters: ExtrasApiExtrasTagsBulkPartialUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasTagsBulkPartialUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasTagsBulkUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasTagsBulkUpdate(requestParameters: ExtrasApiExtrasTagsBulkUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasTagsBulkUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasTagsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasTagsCreate(requestParameters: ExtrasApiExtrasTagsCreateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasTagsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasTagsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasTagsDelete(requestParameters: ExtrasApiExtrasTagsDeleteRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasTagsDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasTagsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasTagsList(requestParameters: ExtrasApiExtrasTagsListRequest = {}, options?: any) {
        return ExtrasApiFp(this.configuration).extrasTagsList(requestParameters.id, requestParameters.name, requestParameters.slug, requestParameters.color, requestParameters.q, requestParameters.idN, requestParameters.idLte, requestParameters.idLt, requestParameters.idGte, requestParameters.idGt, requestParameters.nameN, requestParameters.nameIc, requestParameters.nameNic, requestParameters.nameIew, requestParameters.nameNiew, requestParameters.nameIsw, requestParameters.nameNisw, requestParameters.nameIe, requestParameters.nameNie, requestParameters.slugN, requestParameters.slugIc, requestParameters.slugNic, requestParameters.slugIew, requestParameters.slugNiew, requestParameters.slugIsw, requestParameters.slugNisw, requestParameters.slugIe, requestParameters.slugNie, requestParameters.colorN, requestParameters.colorIc, requestParameters.colorNic, requestParameters.colorIew, requestParameters.colorNiew, requestParameters.colorIsw, requestParameters.colorNisw, requestParameters.colorIe, requestParameters.colorNie, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasTagsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasTagsPartialUpdate(requestParameters: ExtrasApiExtrasTagsPartialUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasTagsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasTagsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasTagsRead(requestParameters: ExtrasApiExtrasTagsReadRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasTagsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExtrasApiExtrasTagsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtrasApi
     */
    public extrasTagsUpdate(requestParameters: ExtrasApiExtrasTagsUpdateRequest, options?: any) {
        return ExtrasApiFp(this.configuration).extrasTagsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}
